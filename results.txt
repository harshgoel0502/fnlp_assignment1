Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9466 / 10000 = 0.9466
Precision: 4583 / 4717 = 0.9716
Recall: 4583 / 4983 = 0.9197
F1 (harmonic mean of precision and recall): 0.9449
=====Dev Accuracy=====
Accuracy: 1625 / 2000 = 0.8125
Precision: 793 / 940 = 0.8436
Recall: 793 / 1021 = 0.7767
F1 (harmonic mean of precision and recall): 0.8088
Time for training and evaluation: 23.92 seconds
=====Test Accuracy=====
Accuracy: 20488 / 25000 = 0.8195
Precision: 9724 / 11460 = 0.8485
Recall: 9724 / 12500 = 0.7779
F1 (harmonic mean of precision and recall): 0.8117

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9476 / 10000 = 0.9476
Precision: 4608 / 4757 = 0.9687
Recall: 4608 / 4983 = 0.9247
F1 (harmonic mean of precision and recall): 0.9462
=====Dev Accuracy=====
Accuracy: 1654 / 2000 = 0.8270
Precision: 804 / 933 = 0.8617
Recall: 804 / 1021 = 0.7875
F1 (harmonic mean of precision and recall): 0.8229
Time for training and evaluation: 24.06 seconds
=====Test Accuracy=====
Accuracy: 20289 / 25000 = 0.8116
Precision: 9556 / 11323 = 0.8439
Recall: 9556 / 12500 = 0.7645
F1 (harmonic mean of precision and recall): 0.8022

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8560 / 10000 = 0.8560
Precision: 4928 / 6313 = 0.7806
Recall: 4928 / 4983 = 0.9890
F1 (harmonic mean of precision and recall): 0.8725
=====Dev Accuracy=====
Accuracy: 1484 / 2000 = 0.7420
Precision: 947 / 1389 = 0.6818
Recall: 947 / 1021 = 0.9275
F1 (harmonic mean of precision and recall): 0.7859
Time for training and evaluation: 23.81 seconds
=====Test Accuracy=====
Accuracy: 18926 / 25000 = 0.7570
Precision: 11758 / 17090 = 0.6880
Recall: 11758 / 12500 = 0.9406
F1 (harmonic mean of precision and recall): 0.7947

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7801 / 10000 = 0.7801
Precision: 2837 / 2890 = 0.9817
Recall: 2837 / 4983 = 0.5693
F1 (harmonic mean of precision and recall): 0.7207
=====Dev Accuracy=====
Accuracy: 1408 / 2000 = 0.7040
Precision: 492 / 555 = 0.8865
Recall: 492 / 1021 = 0.4819
F1 (harmonic mean of precision and recall): 0.6244
Time for training and evaluation: 24.30 seconds
=====Test Accuracy=====
Accuracy: 17552 / 25000 = 0.7021
Precision: 5837 / 6622 = 0.8815
Recall: 5837 / 12500 = 0.4670
F1 (harmonic mean of precision and recall): 0.6105

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8642 / 10000 = 0.8642
Precision: 4914 / 6203 = 0.7922
Recall: 4914 / 4983 = 0.9862
F1 (harmonic mean of precision and recall): 0.8786
=====Dev Accuracy=====
Accuracy: 1517 / 2000 = 0.7585
Precision: 943 / 1348 = 0.6996
Recall: 943 / 1021 = 0.9236
F1 (harmonic mean of precision and recall): 0.7961
Time for training and evaluation: 24.73 seconds
=====Test Accuracy=====
Accuracy: 19152 / 25000 = 0.7661
Precision: 11677 / 16702 = 0.6991
Recall: 11677 / 12500 = 0.9342
F1 (harmonic mean of precision and recall): 0.7997

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9069 / 10000 = 0.9069
Precision: 4093 / 4134 = 0.9901
Recall: 4093 / 4983 = 0.8214
F1 (harmonic mean of precision and recall): 0.8979
=====Dev Accuracy=====
Accuracy: 1559 / 2000 = 0.7795
Precision: 658 / 736 = 0.8940
Recall: 658 / 1021 = 0.6445
F1 (harmonic mean of precision and recall): 0.7490
Time for training and evaluation: 23.89 seconds
=====Test Accuracy=====
Accuracy: 19666 / 25000 = 0.7866
Precision: 8148 / 9130 = 0.8924
Recall: 8148 / 12500 = 0.6518
F1 (harmonic mean of precision and recall): 0.7534

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9601 / 10000 = 0.9601
Precision: 4859 / 5134 = 0.9464
Recall: 4859 / 4983 = 0.9751
F1 (harmonic mean of precision and recall): 0.9606
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 879 / 1068 = 0.8230
Recall: 879 / 1021 = 0.8609
F1 (harmonic mean of precision and recall): 0.8416
Time for training and evaluation: 24.57 seconds
=====Test Accuracy=====
Accuracy: 20833 / 25000 = 0.8333
Precision: 10814 / 13295 = 0.8134
Recall: 10814 / 12500 = 0.8651
F1 (harmonic mean of precision and recall): 0.8385

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=5, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9324 / 10000 = 0.9324
Precision: 4408 / 4509 = 0.9776
Recall: 4408 / 4983 = 0.8846
F1 (harmonic mean of precision and recall): 0.9288
=====Dev Accuracy=====
Accuracy: 1617 / 2000 = 0.8085
Precision: 759 / 880 = 0.8625
Recall: 759 / 1021 = 0.7434
F1 (harmonic mean of precision and recall): 0.7985
Time for training and evaluation: 23.89 seconds
=====Test Accuracy=====
Accuracy: 20113 / 25000 = 0.8045
Precision: 9064 / 10515 = 0.8620
Recall: 9064 / 12500 = 0.7251
F1 (harmonic mean of precision and recall): 0.7877

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7720 / 10000 = 0.7720
Precision: 4921 / 7139 = 0.6893
Recall: 4921 / 4983 = 0.9876
F1 (harmonic mean of precision and recall): 0.8119
=====Dev Accuracy=====
Accuracy: 1412 / 2000 = 0.7060
Precision: 959 / 1485 = 0.6458
Recall: 959 / 1021 = 0.9393
F1 (harmonic mean of precision and recall): 0.7654
Time for training and evaluation: 23.16 seconds
=====Test Accuracy=====
Accuracy: 17499 / 25000 = 0.7000
Precision: 11788 / 18577 = 0.6345
Recall: 11788 / 12500 = 0.9430
F1 (harmonic mean of precision and recall): 0.7586

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9570 / 10000 = 0.9570
Precision: 4735 / 4917 = 0.9630
Recall: 4735 / 4983 = 0.9502
F1 (harmonic mean of precision and recall): 0.9566
=====Dev Accuracy=====
Accuracy: 1657 / 2000 = 0.8285
Precision: 843 / 1008 = 0.8363
Recall: 843 / 1021 = 0.8257
F1 (harmonic mean of precision and recall): 0.8310
Time for training and evaluation: 23.16 seconds
=====Test Accuracy=====
Accuracy: 20914 / 25000 = 0.8366
Precision: 10308 / 12202 = 0.8448
Recall: 10308 / 12500 = 0.8246
F1 (harmonic mean of precision and recall): 0.8346

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9231 / 10000 = 0.9231
Precision: 4335 / 4456 = 0.9728
Recall: 4335 / 4983 = 0.8700
F1 (harmonic mean of precision and recall): 0.9185
=====Dev Accuracy=====
Accuracy: 1608 / 2000 = 0.8040
Precision: 729 / 829 = 0.8794
Recall: 729 / 1021 = 0.7140
F1 (harmonic mean of precision and recall): 0.7881
Time for training and evaluation: 23.26 seconds
=====Test Accuracy=====
Accuracy: 20086 / 25000 = 0.8034
Precision: 8945 / 10304 = 0.8681
Recall: 8945 / 12500 = 0.7156
F1 (harmonic mean of precision and recall): 0.7845

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9394 / 10000 = 0.9394
Precision: 4537 / 4697 = 0.9659
Recall: 4537 / 4983 = 0.9105
F1 (harmonic mean of precision and recall): 0.9374
=====Dev Accuracy=====
Accuracy: 1629 / 2000 = 0.8145
Precision: 796 / 942 = 0.8450
Recall: 796 / 1021 = 0.7796
F1 (harmonic mean of precision and recall): 0.8110
Time for training and evaluation: 23.02 seconds
=====Test Accuracy=====
Accuracy: 20524 / 25000 = 0.8210
Precision: 9816 / 11608 = 0.8456
Recall: 9816 / 12500 = 0.7853
F1 (harmonic mean of precision and recall): 0.8143

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9400 / 10000 = 0.9400
Precision: 4864 / 5345 = 0.9100
Recall: 4864 / 4983 = 0.9761
F1 (harmonic mean of precision and recall): 0.9419
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 912 / 1139 = 0.8007
Recall: 912 / 1021 = 0.8932
F1 (harmonic mean of precision and recall): 0.8444
Time for training and evaluation: 22.86 seconds
=====Test Accuracy=====
Accuracy: 20584 / 25000 = 0.8234
Precision: 11138 / 14192 = 0.7848
Recall: 11138 / 12500 = 0.8910
F1 (harmonic mean of precision and recall): 0.8346

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8604 / 10000 = 0.8604
Precision: 4943 / 6299 = 0.7847
Recall: 4943 / 4983 = 0.9920
F1 (harmonic mean of precision and recall): 0.8763
=====Dev Accuracy=====
Accuracy: 1537 / 2000 = 0.7685
Precision: 967 / 1376 = 0.7028
Recall: 967 / 1021 = 0.9471
F1 (harmonic mean of precision and recall): 0.8068
Time for training and evaluation: 22.70 seconds
=====Test Accuracy=====
Accuracy: 19172 / 25000 = 0.7669
Precision: 11837 / 17002 = 0.6962
Recall: 11837 / 12500 = 0.9470
F1 (harmonic mean of precision and recall): 0.8025

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9509 / 10000 = 0.9509
Precision: 4683 / 4874 = 0.9608
Recall: 4683 / 4983 = 0.9398
F1 (harmonic mean of precision and recall): 0.9502
=====Dev Accuracy=====
Accuracy: 1646 / 2000 = 0.8230
Precision: 825 / 983 = 0.8393
Recall: 825 / 1021 = 0.8080
F1 (harmonic mean of precision and recall): 0.8234
Time for training and evaluation: 23.22 seconds
=====Test Accuracy=====
Accuracy: 20790 / 25000 = 0.8316
Precision: 10199 / 12108 = 0.8423
Recall: 10199 / 12500 = 0.8159
F1 (harmonic mean of precision and recall): 0.8289

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=10, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9508 / 10000 = 0.9508
Precision: 4597 / 4703 = 0.9775
Recall: 4597 / 4983 = 0.9225
F1 (harmonic mean of precision and recall): 0.9492
=====Dev Accuracy=====
Accuracy: 1647 / 2000 = 0.8235
Precision: 790 / 912 = 0.8662
Recall: 790 / 1021 = 0.7738
F1 (harmonic mean of precision and recall): 0.8174
Time for training and evaluation: 23.14 seconds
=====Test Accuracy=====
Accuracy: 20670 / 25000 = 0.8268
Precision: 9728 / 11286 = 0.8620
Recall: 9728 / 12500 = 0.7782
F1 (harmonic mean of precision and recall): 0.8180

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8484 / 10000 = 0.8484
Precision: 4893 / 6319 = 0.7743
Recall: 4893 / 4983 = 0.9819
F1 (harmonic mean of precision and recall): 0.8659
=====Dev Accuracy=====
Accuracy: 1515 / 2000 = 0.7575
Precision: 963 / 1390 = 0.6928
Recall: 963 / 1021 = 0.9432
F1 (harmonic mean of precision and recall): 0.7988
Time for training and evaluation: 22.55 seconds
=====Test Accuracy=====
Accuracy: 19081 / 25000 = 0.7632
Precision: 11704 / 16827 = 0.6955
Recall: 11704 / 12500 = 0.9363
F1 (harmonic mean of precision and recall): 0.7982

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8905 / 10000 = 0.8905
Precision: 4895 / 5902 = 0.8294
Recall: 4895 / 4983 = 0.9823
F1 (harmonic mean of precision and recall): 0.8994
=====Dev Accuracy=====
Accuracy: 1576 / 2000 = 0.7880
Precision: 936 / 1275 = 0.7341
Recall: 936 / 1021 = 0.9167
F1 (harmonic mean of precision and recall): 0.8153
Time for training and evaluation: 22.67 seconds
=====Test Accuracy=====
Accuracy: 19823 / 25000 = 0.7929
Precision: 11565 / 15807 = 0.7316
Recall: 11565 / 12500 = 0.9252
F1 (harmonic mean of precision and recall): 0.8171

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9403 / 10000 = 0.9403
Precision: 4573 / 4760 = 0.9607
Recall: 4573 / 4983 = 0.9177
F1 (harmonic mean of precision and recall): 0.9387
=====Dev Accuracy=====
Accuracy: 1660 / 2000 = 0.8300
Precision: 815 / 949 = 0.8588
Recall: 815 / 1021 = 0.7982
F1 (harmonic mean of precision and recall): 0.8274
Time for training and evaluation: 22.63 seconds
=====Test Accuracy=====
Accuracy: 20416 / 25000 = 0.8166
Precision: 9755 / 11594 = 0.8414
Recall: 9755 / 12500 = 0.7804
F1 (harmonic mean of precision and recall): 0.8097

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9195 / 10000 = 0.9195
Precision: 4367 / 4556 = 0.9585
Recall: 4367 / 4983 = 0.8764
F1 (harmonic mean of precision and recall): 0.9156
=====Dev Accuracy=====
Accuracy: 1595 / 2000 = 0.7975
Precision: 753 / 890 = 0.8461
Recall: 753 / 1021 = 0.7375
F1 (harmonic mean of precision and recall): 0.7881
Time for training and evaluation: 22.67 seconds
=====Test Accuracy=====
Accuracy: 20026 / 25000 = 0.8010
Precision: 9061 / 10596 = 0.8551
Recall: 9061 / 12500 = 0.7249
F1 (harmonic mean of precision and recall): 0.7846

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9432 / 10000 = 0.9432
Precision: 4668 / 4921 = 0.9486
Recall: 4668 / 4983 = 0.9368
F1 (harmonic mean of precision and recall): 0.9426
=====Dev Accuracy=====
Accuracy: 1651 / 2000 = 0.8255
Precision: 832 / 992 = 0.8387
Recall: 832 / 1021 = 0.8149
F1 (harmonic mean of precision and recall): 0.8266
Time for training and evaluation: 22.75 seconds
=====Test Accuracy=====
Accuracy: 20704 / 25000 = 0.8282
Precision: 10182 / 12160 = 0.8373
Recall: 10182 / 12500 = 0.8146
F1 (harmonic mean of precision and recall): 0.8258

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9246 / 10000 = 0.9246
Precision: 4377 / 4525 = 0.9673
Recall: 4377 / 4983 = 0.8784
F1 (harmonic mean of precision and recall): 0.9207
=====Dev Accuracy=====
Accuracy: 1608 / 2000 = 0.8040
Precision: 752 / 875 = 0.8594
Recall: 752 / 1021 = 0.7365
F1 (harmonic mean of precision and recall): 0.7932
Time for training and evaluation: 22.43 seconds
=====Test Accuracy=====
Accuracy: 20260 / 25000 = 0.8104
Precision: 9205 / 10650 = 0.8643
Recall: 9205 / 12500 = 0.7364
F1 (harmonic mean of precision and recall): 0.7952

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9393 / 10000 = 0.9393
Precision: 4509 / 4642 = 0.9713
Recall: 4509 / 4983 = 0.9049
F1 (harmonic mean of precision and recall): 0.9369
=====Dev Accuracy=====
Accuracy: 1635 / 2000 = 0.8175
Precision: 782 / 908 = 0.8612
Recall: 782 / 1021 = 0.7659
F1 (harmonic mean of precision and recall): 0.8108
Time for training and evaluation: 22.66 seconds
=====Test Accuracy=====
Accuracy: 20481 / 25000 = 0.8192
Precision: 9491 / 11001 = 0.8627
Recall: 9491 / 12500 = 0.7593
F1 (harmonic mean of precision and recall): 0.8077

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=15, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8807 / 10000 = 0.8807
Precision: 3872 / 3954 = 0.9793
Recall: 3872 / 4983 = 0.7770
F1 (harmonic mean of precision and recall): 0.8665
=====Dev Accuracy=====
Accuracy: 1524 / 2000 = 0.7620
Precision: 625 / 705 = 0.8865
Recall: 625 / 1021 = 0.6121
F1 (harmonic mean of precision and recall): 0.7242
Time for training and evaluation: 22.63 seconds
=====Test Accuracy=====
Accuracy: 19263 / 25000 = 0.7705
Precision: 7803 / 8843 = 0.8824
Recall: 7803 / 12500 = 0.6242
F1 (harmonic mean of precision and recall): 0.7312

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8399 / 10000 = 0.8399
Precision: 3464 / 3546 = 0.9769
Recall: 3464 / 4983 = 0.6952
F1 (harmonic mean of precision and recall): 0.8123
=====Dev Accuracy=====
Accuracy: 1476 / 2000 = 0.7380
Precision: 565 / 633 = 0.8926
Recall: 565 / 1021 = 0.5534
F1 (harmonic mean of precision and recall): 0.6832
Time for training and evaluation: 22.57 seconds
=====Test Accuracy=====
Accuracy: 18609 / 25000 = 0.7444
Precision: 6923 / 7737 = 0.8948
Recall: 6923 / 12500 = 0.5538
F1 (harmonic mean of precision and recall): 0.6842

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9314 / 10000 = 0.9314
Precision: 4678 / 5059 = 0.9247
Recall: 4678 / 4983 = 0.9388
F1 (harmonic mean of precision and recall): 0.9317
=====Dev Accuracy=====
Accuracy: 1658 / 2000 = 0.8290
Precision: 861 / 1043 = 0.8255
Recall: 861 / 1021 = 0.8433
F1 (harmonic mean of precision and recall): 0.8343
Time for training and evaluation: 22.22 seconds
=====Test Accuracy=====
Accuracy: 20736 / 25000 = 0.8294
Precision: 10626 / 13016 = 0.8164
Recall: 10626 / 12500 = 0.8501
F1 (harmonic mean of precision and recall): 0.8329

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8912 / 10000 = 0.8912
Precision: 4807 / 5719 = 0.8405
Recall: 4807 / 4983 = 0.9647
F1 (harmonic mean of precision and recall): 0.8983
=====Dev Accuracy=====
Accuracy: 1588 / 2000 = 0.7940
Precision: 914 / 1219 = 0.7498
Recall: 914 / 1021 = 0.8952
F1 (harmonic mean of precision and recall): 0.8161
Time for training and evaluation: 22.49 seconds
=====Test Accuracy=====
Accuracy: 19914 / 25000 = 0.7966
Precision: 11308 / 15202 = 0.7438
Recall: 11308 / 12500 = 0.9046
F1 (harmonic mean of precision and recall): 0.8164

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8049 / 10000 = 0.8049
Precision: 4896 / 6760 = 0.7243
Recall: 4896 / 4983 = 0.9825
F1 (harmonic mean of precision and recall): 0.8339
=====Dev Accuracy=====
Accuracy: 1474 / 2000 = 0.7370
Precision: 946 / 1397 = 0.6772
Recall: 946 / 1021 = 0.9265
F1 (harmonic mean of precision and recall): 0.7825
Time for training and evaluation: 22.63 seconds
=====Test Accuracy=====
Accuracy: 18391 / 25000 = 0.7356
Precision: 11787 / 17683 = 0.6666
Recall: 11787 / 12500 = 0.9430
F1 (harmonic mean of precision and recall): 0.7810

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9150 / 10000 = 0.9150
Precision: 4827 / 5521 = 0.8743
Recall: 4827 / 4983 = 0.9687
F1 (harmonic mean of precision and recall): 0.9191
=====Dev Accuracy=====
Accuracy: 1605 / 2000 = 0.8025
Precision: 907 / 1188 = 0.7635
Recall: 907 / 1021 = 0.8883
F1 (harmonic mean of precision and recall): 0.8212
Time for training and evaluation: 22.69 seconds
=====Test Accuracy=====
Accuracy: 20249 / 25000 = 0.8100
Precision: 11171 / 14593 = 0.7655
Recall: 11171 / 12500 = 0.8937
F1 (harmonic mean of precision and recall): 0.8246

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9062 / 10000 = 0.9062
Precision: 4750 / 5455 = 0.8708
Recall: 4750 / 4983 = 0.9532
F1 (harmonic mean of precision and recall): 0.9101
=====Dev Accuracy=====
Accuracy: 1608 / 2000 = 0.8040
Precision: 885 / 1141 = 0.7756
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8187
Time for training and evaluation: 22.55 seconds
=====Test Accuracy=====
Accuracy: 20130 / 25000 = 0.8052
Precision: 11002 / 14374 = 0.7654
Recall: 11002 / 12500 = 0.8802
F1 (harmonic mean of precision and recall): 0.8188

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8029 / 10000 = 0.8029
Precision: 4895 / 6778 = 0.7222
Recall: 4895 / 4983 = 0.9823
F1 (harmonic mean of precision and recall): 0.8324
=====Dev Accuracy=====
Accuracy: 1454 / 2000 = 0.7270
Precision: 958 / 1441 = 0.6648
Recall: 958 / 1021 = 0.9383
F1 (harmonic mean of precision and recall): 0.7782
Time for training and evaluation: 22.45 seconds
=====Test Accuracy=====
Accuracy: 18242 / 25000 = 0.7297
Precision: 11790 / 17838 = 0.6609
Recall: 11790 / 12500 = 0.9432
F1 (harmonic mean of precision and recall): 0.7772

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=20, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8965 / 10000 = 0.8965
Precision: 4019 / 4090 = 0.9826
Recall: 4019 / 4983 = 0.8065
F1 (harmonic mean of precision and recall): 0.8859
=====Dev Accuracy=====
Accuracy: 1580 / 2000 = 0.7900
Precision: 670 / 739 = 0.9066
Recall: 670 / 1021 = 0.6562
F1 (harmonic mean of precision and recall): 0.7614
Time for training and evaluation: 22.46 seconds
=====Test Accuracy=====
Accuracy: 19603 / 25000 = 0.7841
Precision: 8071 / 9039 = 0.8929
Recall: 8071 / 12500 = 0.6457
F1 (harmonic mean of precision and recall): 0.7494

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9375 / 10000 = 0.9375
Precision: 4729 / 5100 = 0.9273
Recall: 4729 / 4983 = 0.9490
F1 (harmonic mean of precision and recall): 0.9380
=====Dev Accuracy=====
Accuracy: 1665 / 2000 = 0.8325
Precision: 864 / 1042 = 0.8292
Recall: 864 / 1021 = 0.8462
F1 (harmonic mean of precision and recall): 0.8376
Time for training and evaluation: 22.34 seconds
=====Test Accuracy=====
Accuracy: 20892 / 25000 = 0.8357
Precision: 10697 / 13002 = 0.8227
Recall: 10697 / 12500 = 0.8558
F1 (harmonic mean of precision and recall): 0.8389

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7196 / 10000 = 0.7196
Precision: 4943 / 7707 = 0.6414
Recall: 4943 / 4983 = 0.9920
F1 (harmonic mean of precision and recall): 0.7790
=====Dev Accuracy=====
Accuracy: 1367 / 2000 = 0.6835
Precision: 973 / 1558 = 0.6245
Recall: 973 / 1021 = 0.9530
F1 (harmonic mean of precision and recall): 0.7546
Time for training and evaluation: 19.55 seconds
=====Test Accuracy=====
Accuracy: 16817 / 25000 = 0.6727
Precision: 12036 / 19755 = 0.6093
Recall: 12036 / 12500 = 0.9629
F1 (harmonic mean of precision and recall): 0.7463

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9147 / 10000 = 0.9147
Precision: 4791 / 5452 = 0.8788
Recall: 4791 / 4983 = 0.9615
F1 (harmonic mean of precision and recall): 0.9183
=====Dev Accuracy=====
Accuracy: 1626 / 2000 = 0.8130
Precision: 893 / 1139 = 0.7840
Recall: 893 / 1021 = 0.8746
F1 (harmonic mean of precision and recall): 0.8269
Time for training and evaluation: 22.46 seconds
=====Test Accuracy=====
Accuracy: 20338 / 25000 = 0.8135
Precision: 11111 / 14384 = 0.7725
Recall: 11111 / 12500 = 0.8889
F1 (harmonic mean of precision and recall): 0.8266

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8622 / 10000 = 0.8622
Precision: 3685 / 3765 = 0.9788
Recall: 3685 / 4983 = 0.7395
F1 (harmonic mean of precision and recall): 0.8425
=====Dev Accuracy=====
Accuracy: 1543 / 2000 = 0.7715
Precision: 637 / 710 = 0.8972
Recall: 637 / 1021 = 0.6239
F1 (harmonic mean of precision and recall): 0.7360
Time for training and evaluation: 22.38 seconds
=====Test Accuracy=====
Accuracy: 19095 / 25000 = 0.7638
Precision: 7553 / 8511 = 0.8874
Recall: 7553 / 12500 = 0.6042
F1 (harmonic mean of precision and recall): 0.7190

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8158 / 10000 = 0.8158
Precision: 3274 / 3407 = 0.9610
Recall: 3274 / 4983 = 0.6570
F1 (harmonic mean of precision and recall): 0.7805
=====Dev Accuracy=====
Accuracy: 1465 / 2000 = 0.7325
Precision: 568 / 650 = 0.8738
Recall: 568 / 1021 = 0.5563
F1 (harmonic mean of precision and recall): 0.6798
Time for training and evaluation: 22.37 seconds
=====Test Accuracy=====
Accuracy: 18311 / 25000 = 0.7324
Precision: 6886 / 7961 = 0.8650
Recall: 6886 / 12500 = 0.5509
F1 (harmonic mean of precision and recall): 0.6731

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8880 / 10000 = 0.8880
Precision: 4824 / 5785 = 0.8339
Recall: 4824 / 4983 = 0.9681
F1 (harmonic mean of precision and recall): 0.8960
=====Dev Accuracy=====
Accuracy: 1578 / 2000 = 0.7890
Precision: 903 / 1207 = 0.7481
Recall: 903 / 1021 = 0.8844
F1 (harmonic mean of precision and recall): 0.8106
Time for training and evaluation: 22.09 seconds
=====Test Accuracy=====
Accuracy: 19899 / 25000 = 0.7960
Precision: 11317 / 15235 = 0.7428
Recall: 11317 / 12500 = 0.9054
F1 (harmonic mean of precision and recall): 0.8161

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9132 / 10000 = 0.9132
Precision: 4253 / 4391 = 0.9686
Recall: 4253 / 4983 = 0.8535
F1 (harmonic mean of precision and recall): 0.9074
=====Dev Accuracy=====
Accuracy: 1597 / 2000 = 0.7985
Precision: 717 / 816 = 0.8787
Recall: 717 / 1021 = 0.7023
F1 (harmonic mean of precision and recall): 0.7806
Time for training and evaluation: 22.37 seconds
=====Test Accuracy=====
Accuracy: 20056 / 25000 = 0.8022
Precision: 8859 / 10162 = 0.8718
Recall: 8859 / 12500 = 0.7087
F1 (harmonic mean of precision and recall): 0.7818

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=25, epochs=3, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9225 / 10000 = 0.9225
Precision: 4324 / 4440 = 0.9739
Recall: 4324 / 4983 = 0.8678
F1 (harmonic mean of precision and recall): 0.9178
=====Dev Accuracy=====
Accuracy: 1625 / 2000 = 0.8125
Precision: 746 / 846 = 0.8818
Recall: 746 / 1021 = 0.7307
F1 (harmonic mean of precision and recall): 0.7991
Time for training and evaluation: 22.29 seconds
=====Test Accuracy=====
Accuracy: 20282 / 25000 = 0.8113
Precision: 9028 / 10274 = 0.8787
Recall: 9028 / 12500 = 0.7222
F1 (harmonic mean of precision and recall): 0.7928

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9633 / 10000 = 0.9633
Precision: 4935 / 5254 = 0.9393
Recall: 4935 / 4983 = 0.9904
F1 (harmonic mean of precision and recall): 0.9641
=====Dev Accuracy=====
Accuracy: 1661 / 2000 = 0.8305
Precision: 902 / 1122 = 0.8039
Recall: 902 / 1021 = 0.8834
F1 (harmonic mean of precision and recall): 0.8418
Time for training and evaluation: 31.51 seconds
=====Test Accuracy=====
Accuracy: 20754 / 25000 = 0.8302
Precision: 11140 / 14026 = 0.7942
Recall: 11140 / 12500 = 0.8912
F1 (harmonic mean of precision and recall): 0.8399

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9606 / 10000 = 0.9606
Precision: 4807 / 5025 = 0.9566
Recall: 4807 / 4983 = 0.9647
F1 (harmonic mean of precision and recall): 0.9606
=====Dev Accuracy=====
Accuracy: 1663 / 2000 = 0.8315
Precision: 852 / 1020 = 0.8353
Recall: 852 / 1021 = 0.8345
F1 (harmonic mean of precision and recall): 0.8349
Time for training and evaluation: 18.42 seconds
=====Test Accuracy=====
Accuracy: 20648 / 25000 = 0.8259
Precision: 10322 / 12496 = 0.8260
Recall: 10322 / 12500 = 0.8258
F1 (harmonic mean of precision and recall): 0.8259

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9644 / 10000 = 0.9644
Precision: 4862 / 5097 = 0.9539
Recall: 4862 / 4983 = 0.9757
F1 (harmonic mean of precision and recall): 0.9647
=====Dev Accuracy=====
Accuracy: 1647 / 2000 = 0.8235
Precision: 862 / 1056 = 0.8163
Recall: 862 / 1021 = 0.8443
F1 (harmonic mean of precision and recall): 0.8300
Time for training and evaluation: 18.60 seconds
=====Test Accuracy=====
Accuracy: 20739 / 25000 = 0.8296
Precision: 10737 / 13235 = 0.8113
Recall: 10737 / 12500 = 0.8590
F1 (harmonic mean of precision and recall): 0.8344

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9625 / 10000 = 0.9625
Precision: 4907 / 5206 = 0.9426
Recall: 4907 / 4983 = 0.9847
F1 (harmonic mean of precision and recall): 0.9632
=====Dev Accuracy=====
Accuracy: 1647 / 2000 = 0.8235
Precision: 885 / 1102 = 0.8031
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8337
Time for training and evaluation: 19.22 seconds
=====Test Accuracy=====
Accuracy: 20669 / 25000 = 0.8268
Precision: 10889 / 13609 = 0.8001
Recall: 10889 / 12500 = 0.8711
F1 (harmonic mean of precision and recall): 0.8341

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9624 / 10000 = 0.9624
Precision: 4791 / 4975 = 0.9630
Recall: 4791 / 4983 = 0.9615
F1 (harmonic mean of precision and recall): 0.9622
=====Dev Accuracy=====
Accuracy: 1650 / 2000 = 0.8250
Precision: 839 / 1007 = 0.8332
Recall: 839 / 1021 = 0.8217
F1 (harmonic mean of precision and recall): 0.8274
Time for training and evaluation: 18.71 seconds
=====Test Accuracy=====
Accuracy: 20602 / 25000 = 0.8241
Precision: 10219 / 12336 = 0.8284
Recall: 10219 / 12500 = 0.8175
F1 (harmonic mean of precision and recall): 0.8229

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9691 / 10000 = 0.9691
Precision: 4762 / 4850 = 0.9819
Recall: 4762 / 4983 = 0.9556
F1 (harmonic mean of precision and recall): 0.9686
=====Dev Accuracy=====
Accuracy: 1668 / 2000 = 0.8340
Precision: 839 / 989 = 0.8483
Recall: 839 / 1021 = 0.8217
F1 (harmonic mean of precision and recall): 0.8348
Time for training and evaluation: 19.13 seconds
=====Test Accuracy=====
Accuracy: 20781 / 25000 = 0.8312
Precision: 10077 / 11873 = 0.8487
Recall: 10077 / 12500 = 0.8062
F1 (harmonic mean of precision and recall): 0.8269

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9764 / 10000 = 0.9764
Precision: 4889 / 5031 = 0.9718
Recall: 4889 / 4983 = 0.9811
F1 (harmonic mean of precision and recall): 0.9764
=====Dev Accuracy=====
Accuracy: 1681 / 2000 = 0.8405
Precision: 882 / 1062 = 0.8305
Recall: 882 / 1021 = 0.8639
F1 (harmonic mean of precision and recall): 0.8469
Time for training and evaluation: 18.49 seconds
=====Test Accuracy=====
Accuracy: 20990 / 25000 = 0.8396
Precision: 10796 / 13102 = 0.8240
Recall: 10796 / 12500 = 0.8637
F1 (harmonic mean of precision and recall): 0.8434

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=5, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9168 / 10000 = 0.9168
Precision: 4898 / 5645 = 0.8677
Recall: 4898 / 4983 = 0.9829
F1 (harmonic mean of precision and recall): 0.9217
=====Dev Accuracy=====
Accuracy: 1595 / 2000 = 0.7975
Precision: 915 / 1214 = 0.7537
Recall: 915 / 1021 = 0.8962
F1 (harmonic mean of precision and recall): 0.8188
Time for training and evaluation: 19.51 seconds
=====Test Accuracy=====
Accuracy: 19927 / 25000 = 0.7971
Precision: 11286 / 15145 = 0.7452
Recall: 11286 / 12500 = 0.9029
F1 (harmonic mean of precision and recall): 0.8165

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9281 / 10000 = 0.9281
Precision: 4796 / 5328 = 0.9002
Recall: 4796 / 4983 = 0.9625
F1 (harmonic mean of precision and recall): 0.9303
=====Dev Accuracy=====
Accuracy: 1584 / 2000 = 0.7920
Precision: 868 / 1131 = 0.7675
Recall: 868 / 1021 = 0.8501
F1 (harmonic mean of precision and recall): 0.8067
Time for training and evaluation: 18.62 seconds
=====Test Accuracy=====
Accuracy: 20081 / 25000 = 0.8032
Precision: 10707 / 13833 = 0.7740
Recall: 10707 / 12500 = 0.8566
F1 (harmonic mean of precision and recall): 0.8132

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9570 / 10000 = 0.9570
Precision: 4809 / 5065 = 0.9495
Recall: 4809 / 4983 = 0.9651
F1 (harmonic mean of precision and recall): 0.9572
=====Dev Accuracy=====
Accuracy: 1667 / 2000 = 0.8335
Precision: 862 / 1036 = 0.8320
Recall: 862 / 1021 = 0.8443
F1 (harmonic mean of precision and recall): 0.8381
Time for training and evaluation: 18.13 seconds
=====Test Accuracy=====
Accuracy: 20561 / 25000 = 0.8224
Precision: 10411 / 12761 = 0.8158
Recall: 10411 / 12500 = 0.8329
F1 (harmonic mean of precision and recall): 0.8243

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9531 / 10000 = 0.9531
Precision: 4612 / 4710 = 0.9792
Recall: 4612 / 4983 = 0.9255
F1 (harmonic mean of precision and recall): 0.9516
=====Dev Accuracy=====
Accuracy: 1640 / 2000 = 0.8200
Precision: 795 / 929 = 0.8558
Recall: 795 / 1021 = 0.7786
F1 (harmonic mean of precision and recall): 0.8154
Time for training and evaluation: 18.27 seconds
=====Test Accuracy=====
Accuracy: 20485 / 25000 = 0.8194
Precision: 9606 / 11227 = 0.8556
Recall: 9606 / 12500 = 0.7685
F1 (harmonic mean of precision and recall): 0.8097

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9600 / 10000 = 0.9600
Precision: 4682 / 4781 = 0.9793
Recall: 4682 / 4983 = 0.9396
F1 (harmonic mean of precision and recall): 0.9590
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 819 / 961 = 0.8522
Recall: 819 / 1021 = 0.8022
F1 (harmonic mean of precision and recall): 0.8264
Time for training and evaluation: 19.25 seconds
=====Test Accuracy=====
Accuracy: 20740 / 25000 = 0.8296
Precision: 9982 / 11724 = 0.8514
Recall: 9982 / 12500 = 0.7986
F1 (harmonic mean of precision and recall): 0.8241

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9612 / 10000 = 0.9612
Precision: 4681 / 4767 = 0.9820
Recall: 4681 / 4983 = 0.9394
F1 (harmonic mean of precision and recall): 0.9602
=====Dev Accuracy=====
Accuracy: 1652 / 2000 = 0.8260
Precision: 792 / 911 = 0.8694
Recall: 792 / 1021 = 0.7757
F1 (harmonic mean of precision and recall): 0.8199
Time for training and evaluation: 19.21 seconds
=====Test Accuracy=====
Accuracy: 20577 / 25000 = 0.8231
Precision: 9703 / 11329 = 0.8565
Recall: 9703 / 12500 = 0.7762
F1 (harmonic mean of precision and recall): 0.8144

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9714 / 10000 = 0.9714
Precision: 4790 / 4883 = 0.9810
Recall: 4790 / 4983 = 0.9613
F1 (harmonic mean of precision and recall): 0.9710
=====Dev Accuracy=====
Accuracy: 1657 / 2000 = 0.8285
Precision: 826 / 974 = 0.8480
Recall: 826 / 1021 = 0.8090
F1 (harmonic mean of precision and recall): 0.8281
Time for training and evaluation: 18.33 seconds
=====Test Accuracy=====
Accuracy: 20750 / 25000 = 0.8300
Precision: 10034 / 11818 = 0.8490
Recall: 10034 / 12500 = 0.8027
F1 (harmonic mean of precision and recall): 0.8252

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9463 / 10000 = 0.9463
Precision: 4489 / 4532 = 0.9905
Recall: 4489 / 4983 = 0.9009
F1 (harmonic mean of precision and recall): 0.9436
=====Dev Accuracy=====
Accuracy: 1615 / 2000 = 0.8075
Precision: 743 / 850 = 0.8741
Recall: 743 / 1021 = 0.7277
F1 (harmonic mean of precision and recall): 0.7942
Time for training and evaluation: 19.38 seconds
=====Test Accuracy=====
Accuracy: 20313 / 25000 = 0.8125
Precision: 9052 / 10291 = 0.8796
Recall: 9052 / 12500 = 0.7242
F1 (harmonic mean of precision and recall): 0.7943

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=10, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9637 / 10000 = 0.9637
Precision: 4831 / 5042 = 0.9582
Recall: 4831 / 4983 = 0.9695
F1 (harmonic mean of precision and recall): 0.9638
=====Dev Accuracy=====
Accuracy: 1666 / 2000 = 0.8330
Precision: 859 / 1031 = 0.8332
Recall: 859 / 1021 = 0.8413
F1 (harmonic mean of precision and recall): 0.8372
Time for training and evaluation: 19.00 seconds
=====Test Accuracy=====
Accuracy: 20831 / 25000 = 0.8332
Precision: 10492 / 12653 = 0.8292
Recall: 10492 / 12500 = 0.8394
F1 (harmonic mean of precision and recall): 0.8343

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7194 / 10000 = 0.7194
Precision: 2205 / 2233 = 0.9875
Recall: 2205 / 4983 = 0.4425
F1 (harmonic mean of precision and recall): 0.6111
=====Dev Accuracy=====
Accuracy: 1336 / 2000 = 0.6680
Precision: 385 / 413 = 0.9322
Recall: 385 / 1021 = 0.3771
F1 (harmonic mean of precision and recall): 0.5370
Time for training and evaluation: 18.18 seconds
=====Test Accuracy=====
Accuracy: 16632 / 25000 = 0.6653
Precision: 4616 / 5100 = 0.9051
Recall: 4616 / 12500 = 0.3693
F1 (harmonic mean of precision and recall): 0.5245

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9640 / 10000 = 0.9640
Precision: 4816 / 5009 = 0.9615
Recall: 4816 / 4983 = 0.9665
F1 (harmonic mean of precision and recall): 0.9640
=====Dev Accuracy=====
Accuracy: 1676 / 2000 = 0.8380
Precision: 873 / 1049 = 0.8322
Recall: 873 / 1021 = 0.8550
F1 (harmonic mean of precision and recall): 0.8435
Time for training and evaluation: 18.21 seconds
=====Test Accuracy=====
Accuracy: 20820 / 25000 = 0.8328
Precision: 10586 / 12852 = 0.8237
Recall: 10586 / 12500 = 0.8469
F1 (harmonic mean of precision and recall): 0.8351

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8582 / 10000 = 0.8582
Precision: 4970 / 6375 = 0.7796
Recall: 4970 / 4983 = 0.9974
F1 (harmonic mean of precision and recall): 0.8752
=====Dev Accuracy=====
Accuracy: 1519 / 2000 = 0.7595
Precision: 966 / 1392 = 0.6940
Recall: 966 / 1021 = 0.9461
F1 (harmonic mean of precision and recall): 0.8007
Time for training and evaluation: 18.45 seconds
=====Test Accuracy=====
Accuracy: 19144 / 25000 = 0.7658
Precision: 11914 / 17184 = 0.6933
Recall: 11914 / 12500 = 0.9531
F1 (harmonic mean of precision and recall): 0.8027

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8833 / 10000 = 0.8833
Precision: 3844 / 3872 = 0.9928
Recall: 3844 / 4983 = 0.7714
F1 (harmonic mean of precision and recall): 0.8682
=====Dev Accuracy=====
Accuracy: 1533 / 2000 = 0.7665
Precision: 627 / 700 = 0.8957
Recall: 627 / 1021 = 0.6141
F1 (harmonic mean of precision and recall): 0.7286
Time for training and evaluation: 19.24 seconds
=====Test Accuracy=====
Accuracy: 19255 / 25000 = 0.7702
Precision: 7602 / 8449 = 0.8998
Recall: 7602 / 12500 = 0.6082
F1 (harmonic mean of precision and recall): 0.7258

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9689 / 10000 = 0.9689
Precision: 4814 / 4956 = 0.9713
Recall: 4814 / 4983 = 0.9661
F1 (harmonic mean of precision and recall): 0.9687
=====Dev Accuracy=====
Accuracy: 1680 / 2000 = 0.8400
Precision: 866 / 1031 = 0.8400
Recall: 866 / 1021 = 0.8482
F1 (harmonic mean of precision and recall): 0.8441
Time for training and evaluation: 18.32 seconds
=====Test Accuracy=====
Accuracy: 20999 / 25000 = 0.8400
Precision: 10622 / 12745 = 0.8334
Recall: 10622 / 12500 = 0.8498
F1 (harmonic mean of precision and recall): 0.8415

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9417 / 10000 = 0.9417
Precision: 4869 / 5338 = 0.9121
Recall: 4869 / 4983 = 0.9771
F1 (harmonic mean of precision and recall): 0.9435
=====Dev Accuracy=====
Accuracy: 1655 / 2000 = 0.8275
Precision: 901 / 1126 = 0.8002
Recall: 901 / 1021 = 0.8825
F1 (harmonic mean of precision and recall): 0.8393
Time for training and evaluation: 18.19 seconds
=====Test Accuracy=====
Accuracy: 20479 / 25000 = 0.8192
Precision: 10979 / 13979 = 0.7854
Recall: 10979 / 12500 = 0.8783
F1 (harmonic mean of precision and recall): 0.8293

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9029 / 10000 = 0.9029
Precision: 4089 / 4166 = 0.9815
Recall: 4089 / 4983 = 0.8206
F1 (harmonic mean of precision and recall): 0.8939
=====Dev Accuracy=====
Accuracy: 1567 / 2000 = 0.7835
Precision: 683 / 778 = 0.8779
Recall: 683 / 1021 = 0.6690
F1 (harmonic mean of precision and recall): 0.7593
Time for training and evaluation: 18.14 seconds
=====Test Accuracy=====
Accuracy: 19573 / 25000 = 0.7829
Precision: 8255 / 9437 = 0.8747
Recall: 8255 / 12500 = 0.6604
F1 (harmonic mean of precision and recall): 0.7526

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=15, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9568 / 10000 = 0.9568
Precision: 4860 / 5169 = 0.9402
Recall: 4860 / 4983 = 0.9753
F1 (harmonic mean of precision and recall): 0.9574
=====Dev Accuracy=====
Accuracy: 1659 / 2000 = 0.8295
Precision: 885 / 1090 = 0.8119
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8385
Time for training and evaluation: 18.24 seconds
=====Test Accuracy=====
Accuracy: 20798 / 25000 = 0.8319
Precision: 10925 / 13552 = 0.8062
Recall: 10925 / 12500 = 0.8740
F1 (harmonic mean of precision and recall): 0.8387

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9589 / 10000 = 0.9589
Precision: 4794 / 5016 = 0.9557
Recall: 4794 / 4983 = 0.9621
F1 (harmonic mean of precision and recall): 0.9589
=====Dev Accuracy=====
Accuracy: 1663 / 2000 = 0.8315
Precision: 847 / 1010 = 0.8386
Recall: 847 / 1021 = 0.8296
F1 (harmonic mean of precision and recall): 0.8341
Time for training and evaluation: 18.07 seconds
=====Test Accuracy=====
Accuracy: 20832 / 25000 = 0.8333
Precision: 10442 / 12552 = 0.8319
Recall: 10442 / 12500 = 0.8354
F1 (harmonic mean of precision and recall): 0.8336

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9608 / 10000 = 0.9608
Precision: 4833 / 5075 = 0.9523
Recall: 4833 / 4983 = 0.9699
F1 (harmonic mean of precision and recall): 0.9610
=====Dev Accuracy=====
Accuracy: 1668 / 2000 = 0.8340
Precision: 873 / 1057 = 0.8259
Recall: 873 / 1021 = 0.8550
F1 (harmonic mean of precision and recall): 0.8402
Time for training and evaluation: 18.30 seconds
=====Test Accuracy=====
Accuracy: 20993 / 25000 = 0.8397
Precision: 10793 / 13093 = 0.8243
Recall: 10793 / 12500 = 0.8634
F1 (harmonic mean of precision and recall): 0.8434

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7191 / 10000 = 0.7191
Precision: 4967 / 7760 = 0.6401
Recall: 4967 / 4983 = 0.9968
F1 (harmonic mean of precision and recall): 0.7796
=====Dev Accuracy=====
Accuracy: 1336 / 2000 = 0.6680
Precision: 987 / 1617 = 0.6104
Recall: 987 / 1021 = 0.9667
F1 (harmonic mean of precision and recall): 0.7483
Time for training and evaluation: 18.23 seconds
=====Test Accuracy=====
Accuracy: 16744 / 25000 = 0.6698
Precision: 12120 / 19996 = 0.6061
Recall: 12120 / 12500 = 0.9696
F1 (harmonic mean of precision and recall): 0.7459

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8408 / 10000 = 0.8408
Precision: 4932 / 6473 = 0.7619
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.8610
=====Dev Accuracy=====
Accuracy: 1504 / 2000 = 0.7520
Precision: 952 / 1379 = 0.6904
Recall: 952 / 1021 = 0.9324
F1 (harmonic mean of precision and recall): 0.7933
Time for training and evaluation: 19.19 seconds
=====Test Accuracy=====
Accuracy: 18774 / 25000 = 0.7510
Precision: 11695 / 17116 = 0.6833
Recall: 11695 / 12500 = 0.9356
F1 (harmonic mean of precision and recall): 0.7898

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8839 / 10000 = 0.8839
Precision: 4935 / 6048 = 0.8160
Recall: 4935 / 4983 = 0.9904
F1 (harmonic mean of precision and recall): 0.8948
=====Dev Accuracy=====
Accuracy: 1551 / 2000 = 0.7755
Precision: 944 / 1316 = 0.7173
Recall: 944 / 1021 = 0.9246
F1 (harmonic mean of precision and recall): 0.8079
Time for training and evaluation: 19.10 seconds
=====Test Accuracy=====
Accuracy: 19402 / 25000 = 0.7761
Precision: 11662 / 16422 = 0.7101
Recall: 11662 / 12500 = 0.9330
F1 (harmonic mean of precision and recall): 0.8064

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9145 / 10000 = 0.9145
Precision: 4925 / 5722 = 0.8607
Recall: 4925 / 4983 = 0.9884
F1 (harmonic mean of precision and recall): 0.9201
=====Dev Accuracy=====
Accuracy: 1605 / 2000 = 0.8025
Precision: 944 / 1262 = 0.7480
Recall: 944 / 1021 = 0.9246
F1 (harmonic mean of precision and recall): 0.8270
Time for training and evaluation: 18.77 seconds
=====Test Accuracy=====
Accuracy: 20040 / 25000 = 0.8016
Precision: 11543 / 15546 = 0.7425
Recall: 11543 / 12500 = 0.9234
F1 (harmonic mean of precision and recall): 0.8231

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8893 / 10000 = 0.8893
Precision: 4932 / 5988 = 0.8236
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.8991
=====Dev Accuracy=====
Accuracy: 1574 / 2000 = 0.7870
Precision: 946 / 1297 = 0.7294
Recall: 946 / 1021 = 0.9265
F1 (harmonic mean of precision and recall): 0.8162
Time for training and evaluation: 18.93 seconds
=====Test Accuracy=====
Accuracy: 19721 / 25000 = 0.7888
Precision: 11703 / 16185 = 0.7231
Recall: 11703 / 12500 = 0.9362
F1 (harmonic mean of precision and recall): 0.8160

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=20, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9361 / 10000 = 0.9361
Precision: 4393 / 4442 = 0.9890
Recall: 4393 / 4983 = 0.8816
F1 (harmonic mean of precision and recall): 0.9322
=====Dev Accuracy=====
Accuracy: 1620 / 2000 = 0.8100
Precision: 733 / 825 = 0.8885
Recall: 733 / 1021 = 0.7179
F1 (harmonic mean of precision and recall): 0.7941
Time for training and evaluation: 18.41 seconds
=====Test Accuracy=====
Accuracy: 20268 / 25000 = 0.8107
Precision: 8926 / 10084 = 0.8852
Recall: 8926 / 12500 = 0.7141
F1 (harmonic mean of precision and recall): 0.7905

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9613 / 10000 = 0.9613
Precision: 4859 / 5122 = 0.9487
Recall: 4859 / 4983 = 0.9751
F1 (harmonic mean of precision and recall): 0.9617
=====Dev Accuracy=====
Accuracy: 1686 / 2000 = 0.8430
Precision: 896 / 1085 = 0.8258
Recall: 896 / 1021 = 0.8776
F1 (harmonic mean of precision and recall): 0.8509
Time for training and evaluation: 18.09 seconds
=====Test Accuracy=====
Accuracy: 20992 / 25000 = 0.8397
Precision: 10906 / 13320 = 0.8188
Recall: 10906 / 12500 = 0.8725
F1 (harmonic mean of precision and recall): 0.8448

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9395 / 10000 = 0.9395
Precision: 4481 / 4584 = 0.9775
Recall: 4481 / 4983 = 0.8993
F1 (harmonic mean of precision and recall): 0.9368
=====Dev Accuracy=====
Accuracy: 1639 / 2000 = 0.8195
Precision: 770 / 880 = 0.8750
Recall: 770 / 1021 = 0.7542
F1 (harmonic mean of precision and recall): 0.8101
Time for training and evaluation: 18.91 seconds
=====Test Accuracy=====
Accuracy: 20435 / 25000 = 0.8174
Precision: 9330 / 10725 = 0.8699
Recall: 9330 / 12500 = 0.7464
F1 (harmonic mean of precision and recall): 0.8034

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9562 / 10000 = 0.9562
Precision: 4878 / 5211 = 0.9361
Recall: 4878 / 4983 = 0.9789
F1 (harmonic mean of precision and recall): 0.9570
=====Dev Accuracy=====
Accuracy: 1666 / 2000 = 0.8330
Precision: 899 / 1111 = 0.8092
Recall: 899 / 1021 = 0.8805
F1 (harmonic mean of precision and recall): 0.8433
Time for training and evaluation: 18.00 seconds
=====Test Accuracy=====
Accuracy: 20903 / 25000 = 0.8361
Precision: 11020 / 13637 = 0.8081
Recall: 11020 / 12500 = 0.8816
F1 (harmonic mean of precision and recall): 0.8432

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9381 / 10000 = 0.9381
Precision: 4537 / 4710 = 0.9633
Recall: 4537 / 4983 = 0.9105
F1 (harmonic mean of precision and recall): 0.9361
=====Dev Accuracy=====
Accuracy: 1654 / 2000 = 0.8270
Precision: 812 / 949 = 0.8556
Recall: 812 / 1021 = 0.7953
F1 (harmonic mean of precision and recall): 0.8244
Time for training and evaluation: 17.91 seconds
=====Test Accuracy=====
Accuracy: 20591 / 25000 = 0.8236
Precision: 9870 / 11649 = 0.8473
Recall: 9870 / 12500 = 0.7896
F1 (harmonic mean of precision and recall): 0.8174

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9430 / 10000 = 0.9430
Precision: 4530 / 4647 = 0.9748
Recall: 4530 / 4983 = 0.9091
F1 (harmonic mean of precision and recall): 0.9408
=====Dev Accuracy=====
Accuracy: 1638 / 2000 = 0.8190
Precision: 777 / 895 = 0.8682
Recall: 777 / 1021 = 0.7610
F1 (harmonic mean of precision and recall): 0.8111
Time for training and evaluation: 17.82 seconds
=====Test Accuracy=====
Accuracy: 20528 / 25000 = 0.8211
Precision: 9508 / 10988 = 0.8653
Recall: 9508 / 12500 = 0.7606
F1 (harmonic mean of precision and recall): 0.8096

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8133 / 10000 = 0.8133
Precision: 3168 / 3220 = 0.9839
Recall: 3168 / 4983 = 0.6358
F1 (harmonic mean of precision and recall): 0.7724
=====Dev Accuracy=====
Accuracy: 1480 / 2000 = 0.7400
Precision: 556 / 611 = 0.9100
Recall: 556 / 1021 = 0.5446
F1 (harmonic mean of precision and recall): 0.6814
Time for training and evaluation: 18.04 seconds
=====Test Accuracy=====
Accuracy: 18174 / 25000 = 0.7270
Precision: 6488 / 7302 = 0.8885
Recall: 6488 / 12500 = 0.5190
F1 (harmonic mean of precision and recall): 0.6553

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9301 / 10000 = 0.9301
Precision: 4831 / 5378 = 0.8983
Recall: 4831 / 4983 = 0.9695
F1 (harmonic mean of precision and recall): 0.9325
=====Dev Accuracy=====
Accuracy: 1653 / 2000 = 0.8265
Precision: 902 / 1130 = 0.7982
Recall: 902 / 1021 = 0.8834
F1 (harmonic mean of precision and recall): 0.8387
Time for training and evaluation: 18.79 seconds
=====Test Accuracy=====
Accuracy: 20428 / 25000 = 0.8171
Precision: 10883 / 13838 = 0.7865
Recall: 10883 / 12500 = 0.8706
F1 (harmonic mean of precision and recall): 0.8264

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=25, epochs=4, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9425 / 10000 = 0.9425
Precision: 4865 / 5322 = 0.9141
Recall: 4865 / 4983 = 0.9763
F1 (harmonic mean of precision and recall): 0.9442
=====Dev Accuracy=====
Accuracy: 1650 / 2000 = 0.8250
Precision: 902 / 1133 = 0.7961
Recall: 902 / 1021 = 0.8834
F1 (harmonic mean of precision and recall): 0.8375
Time for training and evaluation: 17.74 seconds
=====Test Accuracy=====
Accuracy: 20755 / 25000 = 0.8302
Precision: 11103 / 13951 = 0.7959
Recall: 11103 / 12500 = 0.8882
F1 (harmonic mean of precision and recall): 0.8395

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9052 / 10000 = 0.9052
Precision: 4923 / 5811 = 0.8472
Recall: 4923 / 4983 = 0.9880
F1 (harmonic mean of precision and recall): 0.9122
=====Dev Accuracy=====
Accuracy: 1548 / 2000 = 0.7740
Precision: 918 / 1267 = 0.7245
Recall: 918 / 1021 = 0.8991
F1 (harmonic mean of precision and recall): 0.8024
Time for training and evaluation: 23.97 seconds
=====Test Accuracy=====
Accuracy: 19550 / 25000 = 0.7820
Precision: 11417 / 15784 = 0.7233
Recall: 11417 / 12500 = 0.9134
F1 (harmonic mean of precision and recall): 0.8073

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9622 / 10000 = 0.9622
Precision: 4891 / 5177 = 0.9448
Recall: 4891 / 4983 = 0.9815
F1 (harmonic mean of precision and recall): 0.9628
=====Dev Accuracy=====
Accuracy: 1640 / 2000 = 0.8200
Precision: 900 / 1139 = 0.7902
Recall: 900 / 1021 = 0.8815
F1 (harmonic mean of precision and recall): 0.8333
Time for training and evaluation: 24.79 seconds
=====Test Accuracy=====
Accuracy: 20629 / 25000 = 0.8252
Precision: 11025 / 13921 = 0.7920
Recall: 11025 / 12500 = 0.8820
F1 (harmonic mean of precision and recall): 0.8346

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9733 / 10000 = 0.9733
Precision: 4932 / 5148 = 0.9580
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.9736
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 886 / 1087 = 0.8151
Recall: 886 / 1021 = 0.8678
F1 (harmonic mean of precision and recall): 0.8406
Time for training and evaluation: 24.58 seconds
=====Test Accuracy=====
Accuracy: 20690 / 25000 = 0.8276
Precision: 10795 / 13400 = 0.8056
Recall: 10795 / 12500 = 0.8636
F1 (harmonic mean of precision and recall): 0.8336

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9365 / 10000 = 0.9365
Precision: 4365 / 4382 = 0.9961
Recall: 4365 / 4983 = 0.8760
F1 (harmonic mean of precision and recall): 0.9322
=====Dev Accuracy=====
Accuracy: 1608 / 2000 = 0.8040
Precision: 711 / 793 = 0.8966
Recall: 711 / 1021 = 0.6964
F1 (harmonic mean of precision and recall): 0.7839
Time for training and evaluation: 24.99 seconds
=====Test Accuracy=====
Accuracy: 19967 / 25000 = 0.7987
Precision: 8574 / 9681 = 0.8857
Recall: 8574 / 12500 = 0.6859
F1 (harmonic mean of precision and recall): 0.7731

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9820 / 10000 = 0.9820
Precision: 4878 / 4953 = 0.9849
Recall: 4878 / 4983 = 0.9789
F1 (harmonic mean of precision and recall): 0.9819
=====Dev Accuracy=====
Accuracy: 1691 / 2000 = 0.8455
Precision: 854 / 996 = 0.8574
Recall: 854 / 1021 = 0.8364
F1 (harmonic mean of precision and recall): 0.8468
Time for training and evaluation: 24.12 seconds
=====Test Accuracy=====
Accuracy: 20956 / 25000 = 0.8382
Precision: 10432 / 12408 = 0.8407
Recall: 10432 / 12500 = 0.8346
F1 (harmonic mean of precision and recall): 0.8376

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9822 / 10000 = 0.9822
Precision: 4932 / 5059 = 0.9749
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.9823
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 897 / 1090 = 0.8229
Recall: 897 / 1021 = 0.8786
F1 (harmonic mean of precision and recall): 0.8498
Time for training and evaluation: 23.87 seconds
=====Test Accuracy=====
Accuracy: 20820 / 25000 = 0.8328
Precision: 10869 / 13418 = 0.8100
Recall: 10869 / 12500 = 0.8695
F1 (harmonic mean of precision and recall): 0.8387

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9484 / 10000 = 0.9484
Precision: 4949 / 5431 = 0.9113
Recall: 4949 / 4983 = 0.9932
F1 (harmonic mean of precision and recall): 0.9505
=====Dev Accuracy=====
Accuracy: 1630 / 2000 = 0.8150
Precision: 922 / 1193 = 0.7728
Recall: 922 / 1021 = 0.9030
F1 (harmonic mean of precision and recall): 0.8329
Time for training and evaluation: 23.67 seconds
=====Test Accuracy=====
Accuracy: 20349 / 25000 = 0.8140
Precision: 11349 / 14849 = 0.7643
Recall: 11349 / 12500 = 0.9079
F1 (harmonic mean of precision and recall): 0.8299

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=5, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9753 / 10000 = 0.9753
Precision: 4765 / 4794 = 0.9940
Recall: 4765 / 4983 = 0.9563
F1 (harmonic mean of precision and recall): 0.9747
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 806 / 927 = 0.8695
Recall: 806 / 1021 = 0.7894
F1 (harmonic mean of precision and recall): 0.8275
Time for training and evaluation: 24.46 seconds
=====Test Accuracy=====
Accuracy: 20750 / 25000 = 0.8300
Precision: 9712 / 11174 = 0.8692
Recall: 9712 / 12500 = 0.7770
F1 (harmonic mean of precision and recall): 0.8205

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9840 / 10000 = 0.9840
Precision: 4924 / 5025 = 0.9799
Recall: 4924 / 4983 = 0.9882
F1 (harmonic mean of precision and recall): 0.9840
=====Dev Accuracy=====
Accuracy: 1679 / 2000 = 0.8395
Precision: 882 / 1064 = 0.8289
Recall: 882 / 1021 = 0.8639
F1 (harmonic mean of precision and recall): 0.8460
Time for training and evaluation: 22.68 seconds
=====Test Accuracy=====
Accuracy: 20980 / 25000 = 0.8392
Precision: 10692 / 12904 = 0.8286
Recall: 10692 / 12500 = 0.8554
F1 (harmonic mean of precision and recall): 0.8418

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9698 / 10000 = 0.9698
Precision: 4941 / 5201 = 0.9500
Recall: 4941 / 4983 = 0.9916
F1 (harmonic mean of precision and recall): 0.9703
=====Dev Accuracy=====
Accuracy: 1652 / 2000 = 0.8260
Precision: 903 / 1133 = 0.7970
Recall: 903 / 1021 = 0.8844
F1 (harmonic mean of precision and recall): 0.8384
Time for training and evaluation: 23.52 seconds
=====Test Accuracy=====
Accuracy: 20803 / 25000 = 0.8321
Precision: 11165 / 14027 = 0.7960
Recall: 11165 / 12500 = 0.8932
F1 (harmonic mean of precision and recall): 0.8418

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9784 / 10000 = 0.9784
Precision: 4932 / 5097 = 0.9676
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.9786
=====Dev Accuracy=====
Accuracy: 1685 / 2000 = 0.8425
Precision: 902 / 1098 = 0.8215
Recall: 902 / 1021 = 0.8834
F1 (harmonic mean of precision and recall): 0.8513
Time for training and evaluation: 23.29 seconds
=====Test Accuracy=====
Accuracy: 20919 / 25000 = 0.8368
Precision: 10910 / 13401 = 0.8141
Recall: 10910 / 12500 = 0.8728
F1 (harmonic mean of precision and recall): 0.8424

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9489 / 10000 = 0.9489
Precision: 4811 / 5150 = 0.9342
Recall: 4811 / 4983 = 0.9655
F1 (harmonic mean of precision and recall): 0.9496
=====Dev Accuracy=====
Accuracy: 1638 / 2000 = 0.8190
Precision: 867 / 1075 = 0.8065
Recall: 867 / 1021 = 0.8492
F1 (harmonic mean of precision and recall): 0.8273
Time for training and evaluation: 22.83 seconds
=====Test Accuracy=====
Accuracy: 20434 / 25000 = 0.8174
Precision: 10743 / 13552 = 0.7927
Recall: 10743 / 12500 = 0.8594
F1 (harmonic mean of precision and recall): 0.8247

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9767 / 10000 = 0.9767
Precision: 4833 / 4916 = 0.9831
Recall: 4833 / 4983 = 0.9699
F1 (harmonic mean of precision and recall): 0.9765
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 850 / 1015 = 0.8374
Recall: 850 / 1021 = 0.8325
F1 (harmonic mean of precision and recall): 0.8350
Time for training and evaluation: 22.62 seconds
=====Test Accuracy=====
Accuracy: 20939 / 25000 = 0.8376
Precision: 10431 / 12423 = 0.8397
Recall: 10431 / 12500 = 0.8345
F1 (harmonic mean of precision and recall): 0.8371

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9802 / 10000 = 0.9802
Precision: 4889 / 4993 = 0.9792
Recall: 4889 / 4983 = 0.9811
F1 (harmonic mean of precision and recall): 0.9802
=====Dev Accuracy=====
Accuracy: 1673 / 2000 = 0.8365
Precision: 856 / 1018 = 0.8409
Recall: 856 / 1021 = 0.8384
F1 (harmonic mean of precision and recall): 0.8396
Time for training and evaluation: 22.97 seconds
=====Test Accuracy=====
Accuracy: 20922 / 25000 = 0.8369
Precision: 10438 / 12454 = 0.8381
Recall: 10438 / 12500 = 0.8350
F1 (harmonic mean of precision and recall): 0.8366

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9781 / 10000 = 0.9781
Precision: 4818 / 4872 = 0.9889
Recall: 4818 / 4983 = 0.9669
F1 (harmonic mean of precision and recall): 0.9778
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 818 / 951 = 0.8601
Recall: 818 / 1021 = 0.8012
F1 (harmonic mean of precision and recall): 0.8296
Time for training and evaluation: 22.68 seconds
=====Test Accuracy=====
Accuracy: 20846 / 25000 = 0.8338
Precision: 9950 / 11554 = 0.8612
Recall: 9950 / 12500 = 0.7960
F1 (harmonic mean of precision and recall): 0.8273

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=10, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9639 / 10000 = 0.9639
Precision: 4668 / 4714 = 0.9902
Recall: 4668 / 4983 = 0.9368
F1 (harmonic mean of precision and recall): 0.9628
=====Dev Accuracy=====
Accuracy: 1646 / 2000 = 0.8230
Precision: 772 / 877 = 0.8803
Recall: 772 / 1021 = 0.7561
F1 (harmonic mean of precision and recall): 0.8135
Time for training and evaluation: 23.66 seconds
=====Test Accuracy=====
Accuracy: 20474 / 25000 = 0.8190
Precision: 9362 / 10750 = 0.8709
Recall: 9362 / 12500 = 0.7490
F1 (harmonic mean of precision and recall): 0.8053

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9462 / 10000 = 0.9462
Precision: 4501 / 4557 = 0.9877
Recall: 4501 / 4983 = 0.9033
F1 (harmonic mean of precision and recall): 0.9436
=====Dev Accuracy=====
Accuracy: 1597 / 2000 = 0.7985
Precision: 728 / 838 = 0.8687
Recall: 728 / 1021 = 0.7130
F1 (harmonic mean of precision and recall): 0.7832
Time for training and evaluation: 22.59 seconds
=====Test Accuracy=====
Accuracy: 20268 / 25000 = 0.8107
Precision: 9013 / 10258 = 0.8786
Recall: 9013 / 12500 = 0.7210
F1 (harmonic mean of precision and recall): 0.7921

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9708 / 10000 = 0.9708
Precision: 4839 / 4987 = 0.9703
Recall: 4839 / 4983 = 0.9711
F1 (harmonic mean of precision and recall): 0.9707
=====Dev Accuracy=====
Accuracy: 1680 / 2000 = 0.8400
Precision: 863 / 1025 = 0.8420
Recall: 863 / 1021 = 0.8452
F1 (harmonic mean of precision and recall): 0.8436
Time for training and evaluation: 22.27 seconds
=====Test Accuracy=====
Accuracy: 20820 / 25000 = 0.8328
Precision: 10551 / 12782 = 0.8255
Recall: 10551 / 12500 = 0.8441
F1 (harmonic mean of precision and recall): 0.8347

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9765 / 10000 = 0.9765
Precision: 4922 / 5096 = 0.9659
Recall: 4922 / 4983 = 0.9878
F1 (harmonic mean of precision and recall): 0.9767
=====Dev Accuracy=====
Accuracy: 1687 / 2000 = 0.8435
Precision: 893 / 1078 = 0.8284
Recall: 893 / 1021 = 0.8746
F1 (harmonic mean of precision and recall): 0.8509
Time for training and evaluation: 22.49 seconds
=====Test Accuracy=====
Accuracy: 20857 / 25000 = 0.8343
Precision: 10820 / 13283 = 0.8146
Recall: 10820 / 12500 = 0.8656
F1 (harmonic mean of precision and recall): 0.8393

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9303 / 10000 = 0.9303
Precision: 4348 / 4410 = 0.9859
Recall: 4348 / 4983 = 0.8726
F1 (harmonic mean of precision and recall): 0.9258
=====Dev Accuracy=====
Accuracy: 1616 / 2000 = 0.8080
Precision: 743 / 849 = 0.8751
Recall: 743 / 1021 = 0.7277
F1 (harmonic mean of precision and recall): 0.7947
Time for training and evaluation: 22.54 seconds
=====Test Accuracy=====
Accuracy: 19917 / 25000 = 0.7967
Precision: 8770 / 10123 = 0.8663
Recall: 8770 / 12500 = 0.7016
F1 (harmonic mean of precision and recall): 0.7753

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9804 / 10000 = 0.9804
Precision: 4911 / 5035 = 0.9754
Recall: 4911 / 4983 = 0.9856
F1 (harmonic mean of precision and recall): 0.9804
=====Dev Accuracy=====
Accuracy: 1659 / 2000 = 0.8295
Precision: 868 / 1056 = 0.8220
Recall: 868 / 1021 = 0.8501
F1 (harmonic mean of precision and recall): 0.8358
Time for training and evaluation: 22.19 seconds
=====Test Accuracy=====
Accuracy: 21004 / 25000 = 0.8402
Precision: 10736 / 12968 = 0.8279
Recall: 10736 / 12500 = 0.8589
F1 (harmonic mean of precision and recall): 0.8431

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9334 / 10000 = 0.9334
Precision: 4946 / 5575 = 0.8872
Recall: 4946 / 4983 = 0.9926
F1 (harmonic mean of precision and recall): 0.9369
=====Dev Accuracy=====
Accuracy: 1598 / 2000 = 0.7990
Precision: 930 / 1241 = 0.7494
Recall: 930 / 1021 = 0.9109
F1 (harmonic mean of precision and recall): 0.8223
Time for training and evaluation: 22.54 seconds
=====Test Accuracy=====
Accuracy: 20157 / 25000 = 0.8063
Precision: 11394 / 15131 = 0.7530
Recall: 11394 / 12500 = 0.9115
F1 (harmonic mean of precision and recall): 0.8247

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9800 / 10000 = 0.9800
Precision: 4884 / 4985 = 0.9797
Recall: 4884 / 4983 = 0.9801
F1 (harmonic mean of precision and recall): 0.9799
=====Dev Accuracy=====
Accuracy: 1678 / 2000 = 0.8390
Precision: 866 / 1033 = 0.8383
Recall: 866 / 1021 = 0.8482
F1 (harmonic mean of precision and recall): 0.8432
Time for training and evaluation: 23.49 seconds
=====Test Accuracy=====
Accuracy: 20975 / 25000 = 0.8390
Precision: 10561 / 12647 = 0.8351
Recall: 10561 / 12500 = 0.8449
F1 (harmonic mean of precision and recall): 0.8399

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=15, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8368 / 10000 = 0.8368
Precision: 4973 / 6595 = 0.7541
Recall: 4973 / 4983 = 0.9980
F1 (harmonic mean of precision and recall): 0.8590
=====Dev Accuracy=====
Accuracy: 1472 / 2000 = 0.7360
Precision: 967 / 1441 = 0.6711
Recall: 967 / 1021 = 0.9471
F1 (harmonic mean of precision and recall): 0.7855
Time for training and evaluation: 22.06 seconds
=====Test Accuracy=====
Accuracy: 18740 / 25000 = 0.7496
Precision: 12037 / 17834 = 0.6749
Recall: 12037 / 12500 = 0.9630
F1 (harmonic mean of precision and recall): 0.7936

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9556 / 10000 = 0.9556
Precision: 4860 / 5181 = 0.9380
Recall: 4860 / 4983 = 0.9753
F1 (harmonic mean of precision and recall): 0.9563
=====Dev Accuracy=====
Accuracy: 1663 / 2000 = 0.8315
Precision: 889 / 1094 = 0.8126
Recall: 889 / 1021 = 0.8707
F1 (harmonic mean of precision and recall): 0.8407
Time for training and evaluation: 21.90 seconds
=====Test Accuracy=====
Accuracy: 20714 / 25000 = 0.8286
Precision: 10908 / 13602 = 0.8019
Recall: 10908 / 12500 = 0.8726
F1 (harmonic mean of precision and recall): 0.8358

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9633 / 10000 = 0.9633
Precision: 4884 / 5152 = 0.9480
Recall: 4884 / 4983 = 0.9801
F1 (harmonic mean of precision and recall): 0.9638
=====Dev Accuracy=====
Accuracy: 1659 / 2000 = 0.8295
Precision: 885 / 1090 = 0.8119
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8385
Time for training and evaluation: 22.66 seconds
=====Test Accuracy=====
Accuracy: 20708 / 25000 = 0.8283
Precision: 10908 / 13608 = 0.8016
Recall: 10908 / 12500 = 0.8726
F1 (harmonic mean of precision and recall): 0.8356

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9648 / 10000 = 0.9648
Precision: 4726 / 4821 = 0.9803
Recall: 4726 / 4983 = 0.9484
F1 (harmonic mean of precision and recall): 0.9641
=====Dev Accuracy=====
Accuracy: 1660 / 2000 = 0.8300
Precision: 806 / 931 = 0.8657
Recall: 806 / 1021 = 0.7894
F1 (harmonic mean of precision and recall): 0.8258
Time for training and evaluation: 22.52 seconds
=====Test Accuracy=====
Accuracy: 20686 / 25000 = 0.8274
Precision: 9907 / 11628 = 0.8520
Recall: 9907 / 12500 = 0.7926
F1 (harmonic mean of precision and recall): 0.8212

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9741 / 10000 = 0.9741
Precision: 4870 / 5016 = 0.9709
Recall: 4870 / 4983 = 0.9773
F1 (harmonic mean of precision and recall): 0.9741
=====Dev Accuracy=====
Accuracy: 1686 / 2000 = 0.8430
Precision: 883 / 1059 = 0.8338
Recall: 883 / 1021 = 0.8648
F1 (harmonic mean of precision and recall): 0.8490
Time for training and evaluation: 21.84 seconds
=====Test Accuracy=====
Accuracy: 20958 / 25000 = 0.8383
Precision: 10738 / 13018 = 0.8249
Recall: 10738 / 12500 = 0.8590
F1 (harmonic mean of precision and recall): 0.8416

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9548 / 10000 = 0.9548
Precision: 4918 / 5305 = 0.9270
Recall: 4918 / 4983 = 0.9870
F1 (harmonic mean of precision and recall): 0.9561
=====Dev Accuracy=====
Accuracy: 1637 / 2000 = 0.8185
Precision: 916 / 1174 = 0.7802
Recall: 916 / 1021 = 0.8972
F1 (harmonic mean of precision and recall): 0.8346
Time for training and evaluation: 22.86 seconds
=====Test Accuracy=====
Accuracy: 20579 / 25000 = 0.8232
Precision: 11182 / 14285 = 0.7828
Recall: 11182 / 12500 = 0.8946
F1 (harmonic mean of precision and recall): 0.8349

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9528 / 10000 = 0.9528
Precision: 4940 / 5369 = 0.9201
Recall: 4940 / 4983 = 0.9914
F1 (harmonic mean of precision and recall): 0.9544
=====Dev Accuracy=====
Accuracy: 1632 / 2000 = 0.8160
Precision: 915 / 1177 = 0.7774
Recall: 915 / 1021 = 0.8962
F1 (harmonic mean of precision and recall): 0.8326
Time for training and evaluation: 22.03 seconds
=====Test Accuracy=====
Accuracy: 20629 / 25000 = 0.8252
Precision: 11338 / 14547 = 0.7794
Recall: 11338 / 12500 = 0.9070
F1 (harmonic mean of precision and recall): 0.8384

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9126 / 10000 = 0.9126
Precision: 4129 / 4149 = 0.9952
Recall: 4129 / 4983 = 0.8286
F1 (harmonic mean of precision and recall): 0.9043
=====Dev Accuracy=====
Accuracy: 1582 / 2000 = 0.7910
Precision: 683 / 763 = 0.8952
Recall: 683 / 1021 = 0.6690
F1 (harmonic mean of precision and recall): 0.7657
Time for training and evaluation: 22.93 seconds
=====Test Accuracy=====
Accuracy: 19645 / 25000 = 0.7858
Precision: 8162 / 9179 = 0.8892
Recall: 8162 / 12500 = 0.6530
F1 (harmonic mean of precision and recall): 0.7530

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=20, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9724 / 10000 = 0.9724
Precision: 4829 / 4951 = 0.9754
Recall: 4829 / 4983 = 0.9691
F1 (harmonic mean of precision and recall): 0.9722
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 850 / 1010 = 0.8416
Recall: 850 / 1021 = 0.8325
F1 (harmonic mean of precision and recall): 0.8370
Time for training and evaluation: 22.26 seconds
=====Test Accuracy=====
Accuracy: 20864 / 25000 = 0.8346
Precision: 10312 / 12260 = 0.8411
Recall: 10312 / 12500 = 0.8250
F1 (harmonic mean of precision and recall): 0.8330

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9666 / 10000 = 0.9666
Precision: 4855 / 5061 = 0.9593
Recall: 4855 / 4983 = 0.9743
F1 (harmonic mean of precision and recall): 0.9667
=====Dev Accuracy=====
Accuracy: 1677 / 2000 = 0.8385
Precision: 872 / 1046 = 0.8337
Recall: 872 / 1021 = 0.8541
F1 (harmonic mean of precision and recall): 0.8437
Time for training and evaluation: 22.15 seconds
=====Test Accuracy=====
Accuracy: 20871 / 25000 = 0.8348
Precision: 10590 / 12809 = 0.8268
Recall: 10590 / 12500 = 0.8472
F1 (harmonic mean of precision and recall): 0.8369

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9711 / 10000 = 0.9711
Precision: 4787 / 4880 = 0.9809
Recall: 4787 / 4983 = 0.9607
F1 (harmonic mean of precision and recall): 0.9707
=====Dev Accuracy=====
Accuracy: 1667 / 2000 = 0.8335
Precision: 844 / 1000 = 0.8440
Recall: 844 / 1021 = 0.8266
F1 (harmonic mean of precision and recall): 0.8352
Time for training and evaluation: 21.78 seconds
=====Test Accuracy=====
Accuracy: 20938 / 25000 = 0.8375
Precision: 10271 / 12104 = 0.8486
Recall: 10271 / 12500 = 0.8217
F1 (harmonic mean of precision and recall): 0.8349

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9679 / 10000 = 0.9679
Precision: 4916 / 5170 = 0.9509
Recall: 4916 / 4983 = 0.9866
F1 (harmonic mean of precision and recall): 0.9684
=====Dev Accuracy=====
Accuracy: 1673 / 2000 = 0.8365
Precision: 903 / 1112 = 0.8121
Recall: 903 / 1021 = 0.8844
F1 (harmonic mean of precision and recall): 0.8467
Time for training and evaluation: 22.62 seconds
=====Test Accuracy=====
Accuracy: 21054 / 25000 = 0.8422
Precision: 11065 / 13576 = 0.8150
Recall: 11065 / 12500 = 0.8852
F1 (harmonic mean of precision and recall): 0.8487

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9642 / 10000 = 0.9642
Precision: 4866 / 5107 = 0.9528
Recall: 4866 / 4983 = 0.9765
F1 (harmonic mean of precision and recall): 0.9645
=====Dev Accuracy=====
Accuracy: 1673 / 2000 = 0.8365
Precision: 882 / 1070 = 0.8243
Recall: 882 / 1021 = 0.8639
F1 (harmonic mean of precision and recall): 0.8436
Time for training and evaluation: 23.07 seconds
=====Test Accuracy=====
Accuracy: 20951 / 25000 = 0.8380
Precision: 10834 / 13217 = 0.8197
Recall: 10834 / 12500 = 0.8667
F1 (harmonic mean of precision and recall): 0.8426

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8565 / 10000 = 0.8565
Precision: 3591 / 3634 = 0.9882
Recall: 3591 / 4983 = 0.7207
F1 (harmonic mean of precision and recall): 0.8335
=====Dev Accuracy=====
Accuracy: 1503 / 2000 = 0.7515
Precision: 608 / 692 = 0.8786
Recall: 608 / 1021 = 0.5955
F1 (harmonic mean of precision and recall): 0.7099
Time for training and evaluation: 22.94 seconds
=====Test Accuracy=====
Accuracy: 18614 / 25000 = 0.7446
Precision: 7102 / 8090 = 0.8779
Recall: 7102 / 12500 = 0.5682
F1 (harmonic mean of precision and recall): 0.6898

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9602 / 10000 = 0.9602
Precision: 4811 / 5037 = 0.9551
Recall: 4811 / 4983 = 0.9655
F1 (harmonic mean of precision and recall): 0.9603
=====Dev Accuracy=====
Accuracy: 1651 / 2000 = 0.8255
Precision: 859 / 1046 = 0.8212
Recall: 859 / 1021 = 0.8413
F1 (harmonic mean of precision and recall): 0.8312
Time for training and evaluation: 22.68 seconds
=====Test Accuracy=====
Accuracy: 20826 / 25000 = 0.8330
Precision: 10581 / 12836 = 0.8243
Recall: 10581 / 12500 = 0.8465
F1 (harmonic mean of precision and recall): 0.8353

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9174 / 10000 = 0.9174
Precision: 4230 / 4303 = 0.9830
Recall: 4230 / 4983 = 0.8489
F1 (harmonic mean of precision and recall): 0.9110
=====Dev Accuracy=====
Accuracy: 1577 / 2000 = 0.7885
Precision: 695 / 792 = 0.8775
Recall: 695 / 1021 = 0.6807
F1 (harmonic mean of precision and recall): 0.7667
Time for training and evaluation: 21.74 seconds
=====Test Accuracy=====
Accuracy: 19807 / 25000 = 0.7923
Precision: 8600 / 9893 = 0.8693
Recall: 8600 / 12500 = 0.6880
F1 (harmonic mean of precision and recall): 0.7681

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=25, epochs=5, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9672 / 10000 = 0.9672
Precision: 4843 / 5031 = 0.9626
Recall: 4843 / 4983 = 0.9719
F1 (harmonic mean of precision and recall): 0.9672
=====Dev Accuracy=====
Accuracy: 1676 / 2000 = 0.8380
Precision: 881 / 1065 = 0.8272
Recall: 881 / 1021 = 0.8629
F1 (harmonic mean of precision and recall): 0.8447
Time for training and evaluation: 22.94 seconds
=====Test Accuracy=====
Accuracy: 20942 / 25000 = 0.8377
Precision: 10742 / 13042 = 0.8236
Recall: 10742 / 12500 = 0.8594
F1 (harmonic mean of precision and recall): 0.8411

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9845 / 10000 = 0.9845
Precision: 4928 / 5028 = 0.9801
Recall: 4928 / 4983 = 0.9890
F1 (harmonic mean of precision and recall): 0.9845
=====Dev Accuracy=====
Accuracy: 1657 / 2000 = 0.8285
Precision: 871 / 1064 = 0.8186
Recall: 871 / 1021 = 0.8531
F1 (harmonic mean of precision and recall): 0.8355
Time for training and evaluation: 28.18 seconds
=====Test Accuracy=====
Accuracy: 20848 / 25000 = 0.8339
Precision: 10729 / 13110 = 0.8184
Recall: 10729 / 12500 = 0.8583
F1 (harmonic mean of precision and recall): 0.8379

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9875 / 10000 = 0.9875
Precision: 4896 / 4934 = 0.9923
Recall: 4896 / 4983 = 0.9825
F1 (harmonic mean of precision and recall): 0.9874
=====Dev Accuracy=====
Accuracy: 1671 / 2000 = 0.8355
Precision: 842 / 992 = 0.8488
Recall: 842 / 1021 = 0.8247
F1 (harmonic mean of precision and recall): 0.8366
Time for training and evaluation: 28.74 seconds
=====Test Accuracy=====
Accuracy: 20968 / 25000 = 0.8387
Precision: 10325 / 12182 = 0.8476
Recall: 10325 / 12500 = 0.8260
F1 (harmonic mean of precision and recall): 0.8366

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9214 / 10000 = 0.9214
Precision: 4212 / 4227 = 0.9965
Recall: 4212 / 4983 = 0.8453
F1 (harmonic mean of precision and recall): 0.9147
=====Dev Accuracy=====
Accuracy: 1568 / 2000 = 0.7840
Precision: 663 / 737 = 0.8996
Recall: 663 / 1021 = 0.6494
F1 (harmonic mean of precision and recall): 0.7543
Time for training and evaluation: 27.95 seconds
=====Test Accuracy=====
Accuracy: 19548 / 25000 = 0.7819
Precision: 7988 / 8928 = 0.8947
Recall: 7988 / 12500 = 0.6390
F1 (harmonic mean of precision and recall): 0.7456

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9309 / 10000 = 0.9309
Precision: 4945 / 5598 = 0.8834
Recall: 4945 / 4983 = 0.9924
F1 (harmonic mean of precision and recall): 0.9347
=====Dev Accuracy=====
Accuracy: 1566 / 2000 = 0.7830
Precision: 912 / 1237 = 0.7373
Recall: 912 / 1021 = 0.8932
F1 (harmonic mean of precision and recall): 0.8078
Time for training and evaluation: 28.55 seconds
=====Test Accuracy=====
Accuracy: 19906 / 25000 = 0.7962
Precision: 11371 / 15336 = 0.7415
Recall: 11371 / 12500 = 0.9097
F1 (harmonic mean of precision and recall): 0.8170

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9855 / 10000 = 0.9855
Precision: 4945 / 5052 = 0.9788
Recall: 4945 / 4983 = 0.9924
F1 (harmonic mean of precision and recall): 0.9856
=====Dev Accuracy=====
Accuracy: 1660 / 2000 = 0.8300
Precision: 880 / 1079 = 0.8156
Recall: 880 / 1021 = 0.8619
F1 (harmonic mean of precision and recall): 0.8381
Time for training and evaluation: 29.72 seconds
=====Test Accuracy=====
Accuracy: 20938 / 25000 = 0.8375
Precision: 10886 / 13334 = 0.8164
Recall: 10886 / 12500 = 0.8709
F1 (harmonic mean of precision and recall): 0.8428

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9823 / 10000 = 0.9823
Precision: 4916 / 5026 = 0.9781
Recall: 4916 / 4983 = 0.9866
F1 (harmonic mean of precision and recall): 0.9823
=====Dev Accuracy=====
Accuracy: 1662 / 2000 = 0.8310
Precision: 862 / 1041 = 0.8280
Recall: 862 / 1021 = 0.8443
F1 (harmonic mean of precision and recall): 0.8361
Time for training and evaluation: 28.39 seconds
=====Test Accuracy=====
Accuracy: 20840 / 25000 = 0.8336
Precision: 10522 / 12704 = 0.8282
Recall: 10522 / 12500 = 0.8418
F1 (harmonic mean of precision and recall): 0.8349

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9837 / 10000 = 0.9837
Precision: 4927 / 5034 = 0.9787
Recall: 4927 / 4983 = 0.9888
F1 (harmonic mean of precision and recall): 0.9837
=====Dev Accuracy=====
Accuracy: 1665 / 2000 = 0.8325
Precision: 859 / 1032 = 0.8324
Recall: 859 / 1021 = 0.8413
F1 (harmonic mean of precision and recall): 0.8368
Time for training and evaluation: 27.40 seconds
=====Test Accuracy=====
Accuracy: 20836 / 25000 = 0.8334
Precision: 10542 / 12748 = 0.8270
Recall: 10542 / 12500 = 0.8434
F1 (harmonic mean of precision and recall): 0.8351

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=5, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9812 / 10000 = 0.9812
Precision: 4979 / 5163 = 0.9644
Recall: 4979 / 4983 = 0.9992
F1 (harmonic mean of precision and recall): 0.9815
=====Dev Accuracy=====
Accuracy: 1675 / 2000 = 0.8375
Precision: 922 / 1148 = 0.8031
Recall: 922 / 1021 = 0.9030
F1 (harmonic mean of precision and recall): 0.8502
Time for training and evaluation: 28.10 seconds
=====Test Accuracy=====
Accuracy: 20863 / 25000 = 0.8345
Precision: 11243 / 14123 = 0.7961
Recall: 11243 / 12500 = 0.8994
F1 (harmonic mean of precision and recall): 0.8446

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8861 / 10000 = 0.8861
Precision: 3849 / 3854 = 0.9987
Recall: 3849 / 4983 = 0.7724
F1 (harmonic mean of precision and recall): 0.8711
=====Dev Accuracy=====
Accuracy: 1527 / 2000 = 0.7635
Precision: 613 / 678 = 0.9041
Recall: 613 / 1021 = 0.6004
F1 (harmonic mean of precision and recall): 0.7216
Time for training and evaluation: 26.90 seconds
=====Test Accuracy=====
Accuracy: 18973 / 25000 = 0.7589
Precision: 7266 / 8059 = 0.9016
Recall: 7266 / 12500 = 0.5813
F1 (harmonic mean of precision and recall): 0.7068

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9866 / 10000 = 0.9866
Precision: 4903 / 4957 = 0.9891
Recall: 4903 / 4983 = 0.9839
F1 (harmonic mean of precision and recall): 0.9865
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 852 / 1014 = 0.8402
Recall: 852 / 1021 = 0.8345
F1 (harmonic mean of precision and recall): 0.8373
Time for training and evaluation: 26.55 seconds
=====Test Accuracy=====
Accuracy: 21009 / 25000 = 0.8404
Precision: 10453 / 12397 = 0.8432
Recall: 10453 / 12500 = 0.8362
F1 (harmonic mean of precision and recall): 0.8397

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9885 / 10000 = 0.9885
Precision: 4924 / 4980 = 0.9888
Recall: 4924 / 4983 = 0.9882
F1 (harmonic mean of precision and recall): 0.9885
=====Dev Accuracy=====
Accuracy: 1690 / 2000 = 0.8450
Precision: 866 / 1021 = 0.8482
Recall: 866 / 1021 = 0.8482
F1 (harmonic mean of precision and recall): 0.8482
Time for training and evaluation: 26.66 seconds
=====Test Accuracy=====
Accuracy: 20970 / 25000 = 0.8388
Precision: 10538 / 12606 = 0.8360
Recall: 10538 / 12500 = 0.8430
F1 (harmonic mean of precision and recall): 0.8395

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9841 / 10000 = 0.9841
Precision: 4960 / 5096 = 0.9733
Recall: 4960 / 4983 = 0.9954
F1 (harmonic mean of precision and recall): 0.9842
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 893 / 1096 = 0.8148
Recall: 893 / 1021 = 0.8746
F1 (harmonic mean of precision and recall): 0.8436
Time for training and evaluation: 26.87 seconds
=====Test Accuracy=====
Accuracy: 20964 / 25000 = 0.8386
Precision: 11029 / 13594 = 0.8113
Recall: 11029 / 12500 = 0.8823
F1 (harmonic mean of precision and recall): 0.8453

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9774 / 10000 = 0.9774
Precision: 4957 / 5157 = 0.9612
Recall: 4957 / 4983 = 0.9948
F1 (harmonic mean of precision and recall): 0.9777
=====Dev Accuracy=====
Accuracy: 1662 / 2000 = 0.8310
Precision: 913 / 1143 = 0.7988
Recall: 913 / 1021 = 0.8942
F1 (harmonic mean of precision and recall): 0.8438
Time for training and evaluation: 26.53 seconds
=====Test Accuracy=====
Accuracy: 20835 / 25000 = 0.8334
Precision: 11207 / 14079 = 0.7960
Recall: 11207 / 12500 = 0.8966
F1 (harmonic mean of precision and recall): 0.8433

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9849 / 10000 = 0.9849
Precision: 4932 / 5032 = 0.9801
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.9849
=====Dev Accuracy=====
Accuracy: 1679 / 2000 = 0.8395
Precision: 873 / 1046 = 0.8346
Recall: 873 / 1021 = 0.8550
F1 (harmonic mean of precision and recall): 0.8447
Time for training and evaluation: 27.11 seconds
=====Test Accuracy=====
Accuracy: 20962 / 25000 = 0.8385
Precision: 10642 / 12822 = 0.8300
Recall: 10642 / 12500 = 0.8514
F1 (harmonic mean of precision and recall): 0.8405

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9334 / 10000 = 0.9334
Precision: 4339 / 4361 = 0.9950
Recall: 4339 / 4983 = 0.8708
F1 (harmonic mean of precision and recall): 0.9287
=====Dev Accuracy=====
Accuracy: 1578 / 2000 = 0.7890
Precision: 686 / 773 = 0.8875
Recall: 686 / 1021 = 0.6719
F1 (harmonic mean of precision and recall): 0.7648
Time for training and evaluation: 27.99 seconds
=====Test Accuracy=====
Accuracy: 19764 / 25000 = 0.7906
Precision: 8329 / 9394 = 0.8866
Recall: 8329 / 12500 = 0.6663
F1 (harmonic mean of precision and recall): 0.7608

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=10, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9854 / 10000 = 0.9854
Precision: 4885 / 4933 = 0.9903
Recall: 4885 / 4983 = 0.9803
F1 (harmonic mean of precision and recall): 0.9853
=====Dev Accuracy=====
Accuracy: 1684 / 2000 = 0.8420
Precision: 855 / 1005 = 0.8507
Recall: 855 / 1021 = 0.8374
F1 (harmonic mean of precision and recall): 0.8440
Time for training and evaluation: 26.36 seconds
=====Test Accuracy=====
Accuracy: 20911 / 25000 = 0.8364
Precision: 10386 / 12361 = 0.8402
Recall: 10386 / 12500 = 0.8309
F1 (harmonic mean of precision and recall): 0.8355

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9727 / 10000 = 0.9727
Precision: 4741 / 4772 = 0.9935
Recall: 4741 / 4983 = 0.9514
F1 (harmonic mean of precision and recall): 0.9720
=====Dev Accuracy=====
Accuracy: 1642 / 2000 = 0.8210
Precision: 783 / 903 = 0.8671
Recall: 783 / 1021 = 0.7669
F1 (harmonic mean of precision and recall): 0.8139
Time for training and evaluation: 26.84 seconds
=====Test Accuracy=====
Accuracy: 20612 / 25000 = 0.8245
Precision: 9597 / 11082 = 0.8660
Recall: 9597 / 12500 = 0.7678
F1 (harmonic mean of precision and recall): 0.8139

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8170 / 10000 = 0.8170
Precision: 3159 / 3165 = 0.9981
Recall: 3159 / 4983 = 0.6340
F1 (harmonic mean of precision and recall): 0.7754
=====Dev Accuracy=====
Accuracy: 1429 / 2000 = 0.7145
Precision: 484 / 518 = 0.9344
Recall: 484 / 1021 = 0.4740
F1 (harmonic mean of precision and recall): 0.6290
Time for training and evaluation: 26.61 seconds
=====Test Accuracy=====
Accuracy: 17932 / 25000 = 0.7173
Precision: 5841 / 6250 = 0.9346
Recall: 5841 / 12500 = 0.4673
F1 (harmonic mean of precision and recall): 0.6230

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9845 / 10000 = 0.9845
Precision: 4953 / 5078 = 0.9754
Recall: 4953 / 4983 = 0.9940
F1 (harmonic mean of precision and recall): 0.9846
=====Dev Accuracy=====
Accuracy: 1679 / 2000 = 0.8395
Precision: 892 / 1084 = 0.8229
Recall: 892 / 1021 = 0.8737
F1 (harmonic mean of precision and recall): 0.8475
Time for training and evaluation: 25.97 seconds
=====Test Accuracy=====
Accuracy: 20981 / 25000 = 0.8392
Precision: 10994 / 13507 = 0.8139
Recall: 10994 / 12500 = 0.8795
F1 (harmonic mean of precision and recall): 0.8455

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9905 / 10000 = 0.9905
Precision: 4914 / 4940 = 0.9947
Recall: 4914 / 4983 = 0.9862
F1 (harmonic mean of precision and recall): 0.9904
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 848 / 992 = 0.8548
Recall: 848 / 1021 = 0.8306
F1 (harmonic mean of precision and recall): 0.8425
Time for training and evaluation: 27.49 seconds
=====Test Accuracy=====
Accuracy: 21098 / 25000 = 0.8439
Precision: 10395 / 12192 = 0.8526
Recall: 10395 / 12500 = 0.8316
F1 (harmonic mean of precision and recall): 0.8420

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9832 / 10000 = 0.9832
Precision: 4865 / 4915 = 0.9898
Recall: 4865 / 4983 = 0.9763
F1 (harmonic mean of precision and recall): 0.9830
=====Dev Accuracy=====
Accuracy: 1677 / 2000 = 0.8385
Precision: 838 / 978 = 0.8569
Recall: 838 / 1021 = 0.8208
F1 (harmonic mean of precision and recall): 0.8384
Time for training and evaluation: 27.44 seconds
=====Test Accuracy=====
Accuracy: 20872 / 25000 = 0.8349
Precision: 10139 / 11906 = 0.8516
Recall: 10139 / 12500 = 0.8111
F1 (harmonic mean of precision and recall): 0.8309

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8908 / 10000 = 0.8908
Precision: 4941 / 5991 = 0.8247
Recall: 4941 / 4983 = 0.9916
F1 (harmonic mean of precision and recall): 0.9005
=====Dev Accuracy=====
Accuracy: 1543 / 2000 = 0.7715
Precision: 933 / 1302 = 0.7166
Recall: 933 / 1021 = 0.9138
F1 (harmonic mean of precision and recall): 0.8033
Time for training and evaluation: 27.20 seconds
=====Test Accuracy=====
Accuracy: 19418 / 25000 = 0.7767
Precision: 11521 / 16124 = 0.7145
Recall: 11521 / 12500 = 0.9217
F1 (harmonic mean of precision and recall): 0.8050

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9857 / 10000 = 0.9857
Precision: 4926 / 5012 = 0.9828
Recall: 4926 / 4983 = 0.9886
F1 (harmonic mean of precision and recall): 0.9857
=====Dev Accuracy=====
Accuracy: 1689 / 2000 = 0.8445
Precision: 872 / 1034 = 0.8433
Recall: 872 / 1021 = 0.8541
F1 (harmonic mean of precision and recall): 0.8487
Time for training and evaluation: 26.66 seconds
=====Test Accuracy=====
Accuracy: 20976 / 25000 = 0.8390
Precision: 10691 / 12906 = 0.8284
Recall: 10691 / 12500 = 0.8553
F1 (harmonic mean of precision and recall): 0.8416

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=15, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9846 / 10000 = 0.9846
Precision: 4861 / 4893 = 0.9935
Recall: 4861 / 4983 = 0.9755
F1 (harmonic mean of precision and recall): 0.9844
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 809 / 941 = 0.8597
Recall: 809 / 1021 = 0.7924
F1 (harmonic mean of precision and recall): 0.8247
Time for training and evaluation: 26.47 seconds
=====Test Accuracy=====
Accuracy: 20946 / 25000 = 0.8378
Precision: 10085 / 11724 = 0.8602
Recall: 10085 / 12500 = 0.8068
F1 (harmonic mean of precision and recall): 0.8326

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9839 / 10000 = 0.9839
Precision: 4881 / 4940 = 0.9881
Recall: 4881 / 4983 = 0.9795
F1 (harmonic mean of precision and recall): 0.9838
=====Dev Accuracy=====
Accuracy: 1675 / 2000 = 0.8375
Precision: 849 / 1002 = 0.8473
Recall: 849 / 1021 = 0.8315
F1 (harmonic mean of precision and recall): 0.8393
Time for training and evaluation: 27.25 seconds
=====Test Accuracy=====
Accuracy: 21029 / 25000 = 0.8412
Precision: 10396 / 12263 = 0.8478
Recall: 10396 / 12500 = 0.8317
F1 (harmonic mean of precision and recall): 0.8396

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 8909 / 10000 = 0.8909
Precision: 4968 / 6044 = 0.8220
Recall: 4968 / 4983 = 0.9970
F1 (harmonic mean of precision and recall): 0.9011
=====Dev Accuracy=====
Accuracy: 1566 / 2000 = 0.7830
Precision: 953 / 1319 = 0.7225
Recall: 953 / 1021 = 0.9334
F1 (harmonic mean of precision and recall): 0.8145
Time for training and evaluation: 26.72 seconds
=====Test Accuracy=====
Accuracy: 19536 / 25000 = 0.7814
Precision: 11761 / 16486 = 0.7134
Recall: 11761 / 12500 = 0.9409
F1 (harmonic mean of precision and recall): 0.8115

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9639 / 10000 = 0.9639
Precision: 4970 / 5318 = 0.9346
Recall: 4970 / 4983 = 0.9974
F1 (harmonic mean of precision and recall): 0.9650
=====Dev Accuracy=====
Accuracy: 1645 / 2000 = 0.8225
Precision: 918 / 1170 = 0.7846
Recall: 918 / 1021 = 0.8991
F1 (harmonic mean of precision and recall): 0.8380
Time for training and evaluation: 26.06 seconds
=====Test Accuracy=====
Accuracy: 20699 / 25000 = 0.8280
Precision: 11357 / 14515 = 0.7824
Recall: 11357 / 12500 = 0.9086
F1 (harmonic mean of precision and recall): 0.8408

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9727 / 10000 = 0.9727
Precision: 4737 / 4764 = 0.9943
Recall: 4737 / 4983 = 0.9506
F1 (harmonic mean of precision and recall): 0.9720
=====Dev Accuracy=====
Accuracy: 1670 / 2000 = 0.8350
Precision: 796 / 901 = 0.8835
Recall: 796 / 1021 = 0.7796
F1 (harmonic mean of precision and recall): 0.8283
Time for training and evaluation: 26.53 seconds
=====Test Accuracy=====
Accuracy: 20700 / 25000 = 0.8280
Precision: 9627 / 11054 = 0.8709
Recall: 9627 / 12500 = 0.7702
F1 (harmonic mean of precision and recall): 0.8174

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9659 / 10000 = 0.9659
Precision: 4919 / 5196 = 0.9467
Recall: 4919 / 4983 = 0.9872
F1 (harmonic mean of precision and recall): 0.9665
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 884 / 1091 = 0.8103
Recall: 884 / 1021 = 0.8658
F1 (harmonic mean of precision and recall): 0.8371
Time for training and evaluation: 25.59 seconds
=====Test Accuracy=====
Accuracy: 20709 / 25000 = 0.8284
Precision: 10985 / 13761 = 0.7983
Recall: 10985 / 12500 = 0.8788
F1 (harmonic mean of precision and recall): 0.8366

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9695 / 10000 = 0.9695
Precision: 4768 / 4858 = 0.9815
Recall: 4768 / 4983 = 0.9569
F1 (harmonic mean of precision and recall): 0.9690
=====Dev Accuracy=====
Accuracy: 1662 / 2000 = 0.8310
Precision: 818 / 953 = 0.8583
Recall: 818 / 1021 = 0.8012
F1 (harmonic mean of precision and recall): 0.8288
Time for training and evaluation: 25.98 seconds
=====Test Accuracy=====
Accuracy: 20696 / 25000 = 0.8278
Precision: 9939 / 11682 = 0.8508
Recall: 9939 / 12500 = 0.7951
F1 (harmonic mean of precision and recall): 0.8220

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9228 / 10000 = 0.9228
Precision: 4966 / 5721 = 0.8680
Recall: 4966 / 4983 = 0.9966
F1 (harmonic mean of precision and recall): 0.9279
=====Dev Accuracy=====
Accuracy: 1571 / 2000 = 0.7855
Precision: 930 / 1268 = 0.7334
Recall: 930 / 1021 = 0.9109
F1 (harmonic mean of precision and recall): 0.8126
Time for training and evaluation: 25.83 seconds
=====Test Accuracy=====
Accuracy: 19898 / 25000 = 0.7959
Precision: 11653 / 15908 = 0.7325
Recall: 11653 / 12500 = 0.9322
F1 (harmonic mean of precision and recall): 0.8204

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=20, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9849 / 10000 = 0.9849
Precision: 4916 / 5000 = 0.9832
Recall: 4916 / 4983 = 0.9866
F1 (harmonic mean of precision and recall): 0.9849
=====Dev Accuracy=====
Accuracy: 1672 / 2000 = 0.8360
Precision: 867 / 1041 = 0.8329
Recall: 867 / 1021 = 0.8492
F1 (harmonic mean of precision and recall): 0.8409
Time for training and evaluation: 25.79 seconds
=====Test Accuracy=====
Accuracy: 21122 / 25000 = 0.8449
Precision: 10667 / 12712 = 0.8391
Recall: 10667 / 12500 = 0.8534
F1 (harmonic mean of precision and recall): 0.8462

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9726 / 10000 = 0.9726
Precision: 4923 / 5137 = 0.9583
Recall: 4923 / 4983 = 0.9880
F1 (harmonic mean of precision and recall): 0.9729
=====Dev Accuracy=====
Accuracy: 1677 / 2000 = 0.8385
Precision: 890 / 1082 = 0.8226
Recall: 890 / 1021 = 0.8717
F1 (harmonic mean of precision and recall): 0.8464
Time for training and evaluation: 26.76 seconds
=====Test Accuracy=====
Accuracy: 20956 / 25000 = 0.8382
Precision: 10771 / 13086 = 0.8231
Recall: 10771 / 12500 = 0.8617
F1 (harmonic mean of precision and recall): 0.8419

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9723 / 10000 = 0.9723
Precision: 4742 / 4778 = 0.9925
Recall: 4742 / 4983 = 0.9516
F1 (harmonic mean of precision and recall): 0.9716
=====Dev Accuracy=====
Accuracy: 1630 / 2000 = 0.8150
Precision: 768 / 885 = 0.8678
Recall: 768 / 1021 = 0.7522
F1 (harmonic mean of precision and recall): 0.8059
Time for training and evaluation: 27.14 seconds
=====Test Accuracy=====
Accuracy: 20761 / 25000 = 0.8304
Precision: 9717 / 11173 = 0.8697
Recall: 9717 / 12500 = 0.7774
F1 (harmonic mean of precision and recall): 0.8209

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9726 / 10000 = 0.9726
Precision: 4732 / 4755 = 0.9952
Recall: 4732 / 4983 = 0.9496
F1 (harmonic mean of precision and recall): 0.9719
=====Dev Accuracy=====
Accuracy: 1664 / 2000 = 0.8320
Precision: 799 / 913 = 0.8751
Recall: 799 / 1021 = 0.7826
F1 (harmonic mean of precision and recall): 0.8263
Time for training and evaluation: 26.32 seconds
=====Test Accuracy=====
Accuracy: 20765 / 25000 = 0.8306
Precision: 9680 / 11095 = 0.8725
Recall: 9680 / 12500 = 0.7744
F1 (harmonic mean of precision and recall): 0.8205

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9477 / 10000 = 0.9477
Precision: 4563 / 4666 = 0.9779
Recall: 4563 / 4983 = 0.9157
F1 (harmonic mean of precision and recall): 0.9458
=====Dev Accuracy=====
Accuracy: 1605 / 2000 = 0.8025
Precision: 751 / 876 = 0.8573
Recall: 751 / 1021 = 0.7356
F1 (harmonic mean of precision and recall): 0.7918
Time for training and evaluation: 26.76 seconds
=====Test Accuracy=====
Accuracy: 20273 / 25000 = 0.8109
Precision: 9322 / 10871 = 0.8575
Recall: 9322 / 12500 = 0.7458
F1 (harmonic mean of precision and recall): 0.7977

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9778 / 10000 = 0.9778
Precision: 4795 / 4829 = 0.9930
Recall: 4795 / 4983 = 0.9623
F1 (harmonic mean of precision and recall): 0.9774
=====Dev Accuracy=====
Accuracy: 1674 / 2000 = 0.8370
Precision: 823 / 951 = 0.8654
Recall: 823 / 1021 = 0.8061
F1 (harmonic mean of precision and recall): 0.8347
Time for training and evaluation: 25.70 seconds
=====Test Accuracy=====
Accuracy: 20954 / 25000 = 0.8382
Precision: 9998 / 11542 = 0.8662
Recall: 9998 / 12500 = 0.7998
F1 (harmonic mean of precision and recall): 0.8317

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9795 / 10000 = 0.9795
Precision: 4908 / 5038 = 0.9742
Recall: 4908 / 4983 = 0.9849
F1 (harmonic mean of precision and recall): 0.9795
=====Dev Accuracy=====
Accuracy: 1686 / 2000 = 0.8430
Precision: 881 / 1055 = 0.8351
Recall: 881 / 1021 = 0.8629
F1 (harmonic mean of precision and recall): 0.8487
Time for training and evaluation: 27.14 seconds
=====Test Accuracy=====
Accuracy: 21108 / 25000 = 0.8443
Precision: 10815 / 13022 = 0.8305
Recall: 10815 / 12500 = 0.8652
F1 (harmonic mean of precision and recall): 0.8475

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9691 / 10000 = 0.9691
Precision: 4705 / 4736 = 0.9935
Recall: 4705 / 4983 = 0.9442
F1 (harmonic mean of precision and recall): 0.9682
=====Dev Accuracy=====
Accuracy: 1665 / 2000 = 0.8325
Precision: 800 / 914 = 0.8753
Recall: 800 / 1021 = 0.7835
F1 (harmonic mean of precision and recall): 0.8269
Time for training and evaluation: 25.86 seconds
=====Test Accuracy=====
Accuracy: 20768 / 25000 = 0.8307
Precision: 9737 / 11206 = 0.8689
Recall: 9737 / 12500 = 0.7790
F1 (harmonic mean of precision and recall): 0.8215

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=25, epochs=6, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9794 / 10000 = 0.9794
Precision: 4869 / 4961 = 0.9815
Recall: 4869 / 4983 = 0.9771
F1 (harmonic mean of precision and recall): 0.9793
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 857 / 1010 = 0.8485
Recall: 857 / 1021 = 0.8394
F1 (harmonic mean of precision and recall): 0.8439
Time for training and evaluation: 26.00 seconds
=====Test Accuracy=====
Accuracy: 20839 / 25000 = 0.8336
Precision: 10367 / 12395 = 0.8364
Recall: 10367 / 12500 = 0.8294
F1 (harmonic mean of precision and recall): 0.8329

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9912 / 10000 = 0.9912
Precision: 4963 / 5031 = 0.9865
Recall: 4963 / 4983 = 0.9960
F1 (harmonic mean of precision and recall): 0.9912
=====Dev Accuracy=====
Accuracy: 1689 / 2000 = 0.8445
Precision: 882 / 1054 = 0.8368
Recall: 882 / 1021 = 0.8639
F1 (harmonic mean of precision and recall): 0.8501
Time for training and evaluation: 32.55 seconds
=====Test Accuracy=====
Accuracy: 21035 / 25000 = 0.8414
Precision: 10791 / 13047 = 0.8271
Recall: 10791 / 12500 = 0.8633
F1 (harmonic mean of precision and recall): 0.8448

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9836 / 10000 = 0.9836
Precision: 4976 / 5133 = 0.9694
Recall: 4976 / 4983 = 0.9986
F1 (harmonic mean of precision and recall): 0.9838
=====Dev Accuracy=====
Accuracy: 1652 / 2000 = 0.8260
Precision: 914 / 1155 = 0.7913
Recall: 914 / 1021 = 0.8952
F1 (harmonic mean of precision and recall): 0.8401
Time for training and evaluation: 32.88 seconds
=====Test Accuracy=====
Accuracy: 20809 / 25000 = 0.8324
Precision: 11216 / 14123 = 0.7942
Recall: 11216 / 12500 = 0.8973
F1 (harmonic mean of precision and recall): 0.8426

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9912 / 10000 = 0.9912
Precision: 4959 / 5023 = 0.9873
Recall: 4959 / 4983 = 0.9952
F1 (harmonic mean of precision and recall): 0.9912
=====Dev Accuracy=====
Accuracy: 1680 / 2000 = 0.8400
Precision: 884 / 1067 = 0.8285
Recall: 884 / 1021 = 0.8658
F1 (harmonic mean of precision and recall): 0.8467
Time for training and evaluation: 32.36 seconds
=====Test Accuracy=====
Accuracy: 20968 / 25000 = 0.8387
Precision: 10835 / 13202 = 0.8207
Recall: 10835 / 12500 = 0.8668
F1 (harmonic mean of precision and recall): 0.8431

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9875 / 10000 = 0.9875
Precision: 4951 / 5044 = 0.9816
Recall: 4951 / 4983 = 0.9936
F1 (harmonic mean of precision and recall): 0.9875
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 865 / 1053 = 0.8215
Recall: 865 / 1021 = 0.8472
F1 (harmonic mean of precision and recall): 0.8341
Time for training and evaluation: 34.19 seconds
=====Test Accuracy=====
Accuracy: 20858 / 25000 = 0.8343
Precision: 10579 / 12800 = 0.8265
Recall: 10579 / 12500 = 0.8463
F1 (harmonic mean of precision and recall): 0.8363

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9931 / 10000 = 0.9931
Precision: 4927 / 4940 = 0.9974
Recall: 4927 / 4983 = 0.9888
F1 (harmonic mean of precision and recall): 0.9930
=====Dev Accuracy=====
Accuracy: 1671 / 2000 = 0.8355
Precision: 828 / 964 = 0.8589
Recall: 828 / 1021 = 0.8110
F1 (harmonic mean of precision and recall): 0.8343
Time for training and evaluation: 33.73 seconds
=====Test Accuracy=====
Accuracy: 20921 / 25000 = 0.8368
Precision: 10178 / 11935 = 0.8528
Recall: 10178 / 12500 = 0.8142
F1 (harmonic mean of precision and recall): 0.8331

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9917 / 10000 = 0.9917
Precision: 4967 / 5034 = 0.9867
Recall: 4967 / 4983 = 0.9968
F1 (harmonic mean of precision and recall): 0.9917
=====Dev Accuracy=====
Accuracy: 1691 / 2000 = 0.8455
Precision: 887 / 1062 = 0.8352
Recall: 887 / 1021 = 0.8688
F1 (harmonic mean of precision and recall): 0.8517
Time for training and evaluation: 32.34 seconds
=====Test Accuracy=====
Accuracy: 21073 / 25000 = 0.8429
Precision: 10789 / 13005 = 0.8296
Recall: 10789 / 12500 = 0.8631
F1 (harmonic mean of precision and recall): 0.8460

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9943 / 10000 = 0.9943
Precision: 4949 / 4972 = 0.9954
Recall: 4949 / 4983 = 0.9932
F1 (harmonic mean of precision and recall): 0.9943
=====Dev Accuracy=====
Accuracy: 1671 / 2000 = 0.8355
Precision: 845 / 998 = 0.8467
Recall: 845 / 1021 = 0.8276
F1 (harmonic mean of precision and recall): 0.8370
Time for training and evaluation: 32.56 seconds
=====Test Accuracy=====
Accuracy: 21028 / 25000 = 0.8411
Precision: 10410 / 12292 = 0.8469
Recall: 10410 / 12500 = 0.8328
F1 (harmonic mean of precision and recall): 0.8398

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=5, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9900 / 10000 = 0.9900
Precision: 4894 / 4905 = 0.9978
Recall: 4894 / 4983 = 0.9821
F1 (harmonic mean of precision and recall): 0.9899
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 816 / 942 = 0.8662
Recall: 816 / 1021 = 0.7992
F1 (harmonic mean of precision and recall): 0.8314
Time for training and evaluation: 33.21 seconds
=====Test Accuracy=====
Accuracy: 20878 / 25000 = 0.8351
Precision: 9965 / 11552 = 0.8626
Recall: 9965 / 12500 = 0.7972
F1 (harmonic mean of precision and recall): 0.8286

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9937 / 10000 = 0.9937
Precision: 4947 / 4974 = 0.9946
Recall: 4947 / 4983 = 0.9928
F1 (harmonic mean of precision and recall): 0.9937
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 880 / 1056 = 0.8333
Recall: 880 / 1021 = 0.8619
F1 (harmonic mean of precision and recall): 0.8474
Time for training and evaluation: 32.13 seconds
=====Test Accuracy=====
Accuracy: 21041 / 25000 = 0.8416
Precision: 10686 / 12831 = 0.8328
Recall: 10686 / 12500 = 0.8549
F1 (harmonic mean of precision and recall): 0.8437

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9895 / 10000 = 0.9895
Precision: 4961 / 5044 = 0.9835
Recall: 4961 / 4983 = 0.9956
F1 (harmonic mean of precision and recall): 0.9895
=====Dev Accuracy=====
Accuracy: 1685 / 2000 = 0.8425
Precision: 885 / 1064 = 0.8318
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8489
Time for training and evaluation: 31.60 seconds
=====Test Accuracy=====
Accuracy: 21035 / 25000 = 0.8414
Precision: 10865 / 13195 = 0.8234
Recall: 10865 / 12500 = 0.8692
F1 (harmonic mean of precision and recall): 0.8457

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9903 / 10000 = 0.9903
Precision: 4910 / 4934 = 0.9951
Recall: 4910 / 4983 = 0.9854
F1 (harmonic mean of precision and recall): 0.9902
=====Dev Accuracy=====
Accuracy: 1674 / 2000 = 0.8370
Precision: 833 / 971 = 0.8579
Recall: 833 / 1021 = 0.8159
F1 (harmonic mean of precision and recall): 0.8363
Time for training and evaluation: 32.81 seconds
=====Test Accuracy=====
Accuracy: 20959 / 25000 = 0.8384
Precision: 10191 / 11923 = 0.8547
Recall: 10191 / 12500 = 0.8153
F1 (harmonic mean of precision and recall): 0.8345

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9546 / 10000 = 0.9546
Precision: 4556 / 4583 = 0.9941
Recall: 4556 / 4983 = 0.9143
F1 (harmonic mean of precision and recall): 0.9525
=====Dev Accuracy=====
Accuracy: 1589 / 2000 = 0.7945
Precision: 727 / 844 = 0.8614
Recall: 727 / 1021 = 0.7120
F1 (harmonic mean of precision and recall): 0.7796
Time for training and evaluation: 32.18 seconds
=====Test Accuracy=====
Accuracy: 20053 / 25000 = 0.8021
Precision: 8925 / 10297 = 0.8668
Recall: 8925 / 12500 = 0.7140
F1 (harmonic mean of precision and recall): 0.7830

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9896 / 10000 = 0.9896
Precision: 4889 / 4899 = 0.9980
Recall: 4889 / 4983 = 0.9811
F1 (harmonic mean of precision and recall): 0.9895
=====Dev Accuracy=====
Accuracy: 1671 / 2000 = 0.8355
Precision: 816 / 940 = 0.8681
Recall: 816 / 1021 = 0.7992
F1 (harmonic mean of precision and recall): 0.8322
Time for training and evaluation: 31.58 seconds
=====Test Accuracy=====
Accuracy: 20899 / 25000 = 0.8360
Precision: 10022 / 11645 = 0.8606
Recall: 10022 / 12500 = 0.8018
F1 (harmonic mean of precision and recall): 0.8302

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9806 / 10000 = 0.9806
Precision: 4890 / 4991 = 0.9798
Recall: 4890 / 4983 = 0.9813
F1 (harmonic mean of precision and recall): 0.9805
=====Dev Accuracy=====
Accuracy: 1676 / 2000 = 0.8380
Precision: 860 / 1023 = 0.8407
Recall: 860 / 1021 = 0.8423
F1 (harmonic mean of precision and recall): 0.8415
Time for training and evaluation: 31.51 seconds
=====Test Accuracy=====
Accuracy: 20804 / 25000 = 0.8322
Precision: 10562 / 12820 = 0.8239
Recall: 10562 / 12500 = 0.8450
F1 (harmonic mean of precision and recall): 0.8343

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9939 / 10000 = 0.9939
Precision: 4944 / 4966 = 0.9956
Recall: 4944 / 4983 = 0.9922
F1 (harmonic mean of precision and recall): 0.9939
=====Dev Accuracy=====
Accuracy: 1692 / 2000 = 0.8460
Precision: 859 / 1005 = 0.8547
Recall: 859 / 1021 = 0.8413
F1 (harmonic mean of precision and recall): 0.8480
Time for training and evaluation: 30.66 seconds
=====Test Accuracy=====
Accuracy: 21052 / 25000 = 0.8421
Precision: 10516 / 12480 = 0.8426
Recall: 10516 / 12500 = 0.8413
F1 (harmonic mean of precision and recall): 0.8420

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=10, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9790 / 10000 = 0.9790
Precision: 4966 / 5159 = 0.9626
Recall: 4966 / 4983 = 0.9966
F1 (harmonic mean of precision and recall): 0.9793
=====Dev Accuracy=====
Accuracy: 1648 / 2000 = 0.8240
Precision: 903 / 1137 = 0.7942
Recall: 903 / 1021 = 0.8844
F1 (harmonic mean of precision and recall): 0.8369
Time for training and evaluation: 31.06 seconds
=====Test Accuracy=====
Accuracy: 20806 / 25000 = 0.8322
Precision: 11187 / 14068 = 0.7952
Recall: 11187 / 12500 = 0.8950
F1 (harmonic mean of precision and recall): 0.8421

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9585 / 10000 = 0.9585
Precision: 4574 / 4580 = 0.9987
Recall: 4574 / 4983 = 0.9179
F1 (harmonic mean of precision and recall): 0.9566
=====Dev Accuracy=====
Accuracy: 1606 / 2000 = 0.8030
Precision: 722 / 817 = 0.8837
Recall: 722 / 1021 = 0.7071
F1 (harmonic mean of precision and recall): 0.7856
Time for training and evaluation: 30.00 seconds
=====Test Accuracy=====
Accuracy: 20274 / 25000 = 0.8110
Precision: 8921 / 10068 = 0.8861
Recall: 8921 / 12500 = 0.7137
F1 (harmonic mean of precision and recall): 0.7906

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9839 / 10000 = 0.9839
Precision: 4835 / 4848 = 0.9973
Recall: 4835 / 4983 = 0.9703
F1 (harmonic mean of precision and recall): 0.9836
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 796 / 915 = 0.8699
Recall: 796 / 1021 = 0.7796
F1 (harmonic mean of precision and recall): 0.8223
Time for training and evaluation: 30.19 seconds
=====Test Accuracy=====
Accuracy: 20805 / 25000 = 0.8322
Precision: 9768 / 11231 = 0.8697
Recall: 9768 / 12500 = 0.7814
F1 (harmonic mean of precision and recall): 0.8232

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9932 / 10000 = 0.9932
Precision: 4949 / 4983 = 0.9932
Recall: 4949 / 4983 = 0.9932
F1 (harmonic mean of precision and recall): 0.9932
=====Dev Accuracy=====
Accuracy: 1684 / 2000 = 0.8420
Precision: 872 / 1039 = 0.8393
Recall: 872 / 1021 = 0.8541
F1 (harmonic mean of precision and recall): 0.8466
Time for training and evaluation: 30.88 seconds
=====Test Accuracy=====
Accuracy: 21126 / 25000 = 0.8450
Precision: 10607 / 12588 = 0.8426
Recall: 10607 / 12500 = 0.8486
F1 (harmonic mean of precision and recall): 0.8456

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9868 / 10000 = 0.9868
Precision: 4951 / 5051 = 0.9802
Recall: 4951 / 4983 = 0.9936
F1 (harmonic mean of precision and recall): 0.9868
=====Dev Accuracy=====
Accuracy: 1690 / 2000 = 0.8450
Precision: 899 / 1087 = 0.8270
Recall: 899 / 1021 = 0.8805
F1 (harmonic mean of precision and recall): 0.8529
Time for training and evaluation: 29.96 seconds
=====Test Accuracy=====
Accuracy: 20925 / 25000 = 0.8370
Precision: 10878 / 13331 = 0.8160
Recall: 10878 / 12500 = 0.8702
F1 (harmonic mean of precision and recall): 0.8422

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9926 / 10000 = 0.9926
Precision: 4970 / 5031 = 0.9879
Recall: 4970 / 4983 = 0.9974
F1 (harmonic mean of precision and recall): 0.9926
=====Dev Accuracy=====
Accuracy: 1678 / 2000 = 0.8390
Precision: 879 / 1059 = 0.8300
Recall: 879 / 1021 = 0.8609
F1 (harmonic mean of precision and recall): 0.8452
Time for training and evaluation: 30.13 seconds
=====Test Accuracy=====
Accuracy: 21101 / 25000 = 0.8440
Precision: 10810 / 13019 = 0.8303
Recall: 10810 / 12500 = 0.8648
F1 (harmonic mean of precision and recall): 0.8472

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9907 / 10000 = 0.9907
Precision: 4926 / 4962 = 0.9927
Recall: 4926 / 4983 = 0.9886
F1 (harmonic mean of precision and recall): 0.9906
=====Dev Accuracy=====
Accuracy: 1667 / 2000 = 0.8335
Precision: 842 / 996 = 0.8454
Recall: 842 / 1021 = 0.8247
F1 (harmonic mean of precision and recall): 0.8349
Time for training and evaluation: 30.47 seconds
=====Test Accuracy=====
Accuracy: 21005 / 25000 = 0.8402
Precision: 10494 / 12483 = 0.8407
Recall: 10494 / 12500 = 0.8395
F1 (harmonic mean of precision and recall): 0.8401

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 7087 / 10000 = 0.7087
Precision: 2073 / 2076 = 0.9986
Recall: 2073 / 4983 = 0.4160
F1 (harmonic mean of precision and recall): 0.5873
=====Dev Accuracy=====
Accuracy: 1330 / 2000 = 0.6650
Precision: 380 / 409 = 0.9291
Recall: 380 / 1021 = 0.3722
F1 (harmonic mean of precision and recall): 0.5315
Time for training and evaluation: 31.88 seconds
=====Test Accuracy=====
Accuracy: 16348 / 25000 = 0.6539
Precision: 4297 / 4746 = 0.9054
Recall: 4297 / 12500 = 0.3438
F1 (harmonic mean of precision and recall): 0.4983

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=15, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9879 / 10000 = 0.9879
Precision: 4956 / 5050 = 0.9814
Recall: 4956 / 4983 = 0.9946
F1 (harmonic mean of precision and recall): 0.9879
=====Dev Accuracy=====
Accuracy: 1672 / 2000 = 0.8360
Precision: 893 / 1093 = 0.8170
Recall: 893 / 1021 = 0.8746
F1 (harmonic mean of precision and recall): 0.8448
Time for training and evaluation: 30.46 seconds
=====Test Accuracy=====
Accuracy: 20996 / 25000 = 0.8398
Precision: 10907 / 13318 = 0.8190
Recall: 10907 / 12500 = 0.8726
F1 (harmonic mean of precision and recall): 0.8449

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9877 / 10000 = 0.9877
Precision: 4940 / 5020 = 0.9841
Recall: 4940 / 4983 = 0.9914
F1 (harmonic mean of precision and recall): 0.9877
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 867 / 1030 = 0.8417
Recall: 867 / 1021 = 0.8492
F1 (harmonic mean of precision and recall): 0.8454
Time for training and evaluation: 31.63 seconds
=====Test Accuracy=====
Accuracy: 21029 / 25000 = 0.8412
Precision: 10630 / 12731 = 0.8350
Recall: 10630 / 12500 = 0.8504
F1 (harmonic mean of precision and recall): 0.8426

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9843 / 10000 = 0.9843
Precision: 4947 / 5068 = 0.9761
Recall: 4947 / 4983 = 0.9928
F1 (harmonic mean of precision and recall): 0.9844
=====Dev Accuracy=====
Accuracy: 1669 / 2000 = 0.8345
Precision: 882 / 1074 = 0.8212
Recall: 882 / 1021 = 0.8639
F1 (harmonic mean of precision and recall): 0.8420
Time for training and evaluation: 31.48 seconds
=====Test Accuracy=====
Accuracy: 21007 / 25000 = 0.8403
Precision: 10856 / 13205 = 0.8221
Recall: 10856 / 12500 = 0.8685
F1 (harmonic mean of precision and recall): 0.8447

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9853 / 10000 = 0.9853
Precision: 4871 / 4906 = 0.9929
Recall: 4871 / 4983 = 0.9775
F1 (harmonic mean of precision and recall): 0.9851
=====Dev Accuracy=====
Accuracy: 1665 / 2000 = 0.8325
Precision: 822 / 958 = 0.8580
Recall: 822 / 1021 = 0.8051
F1 (harmonic mean of precision and recall): 0.8307
Time for training and evaluation: 30.24 seconds
=====Test Accuracy=====
Accuracy: 20907 / 25000 = 0.8363
Precision: 10047 / 11687 = 0.8597
Recall: 10047 / 12500 = 0.8038
F1 (harmonic mean of precision and recall): 0.8308

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9875 / 10000 = 0.9875
Precision: 4944 / 5030 = 0.9829
Recall: 4944 / 4983 = 0.9922
F1 (harmonic mean of precision and recall): 0.9875
=====Dev Accuracy=====
Accuracy: 1697 / 2000 = 0.8485
Precision: 894 / 1070 = 0.8355
Recall: 894 / 1021 = 0.8756
F1 (harmonic mean of precision and recall): 0.8551
Time for training and evaluation: 29.76 seconds
=====Test Accuracy=====
Accuracy: 21026 / 25000 = 0.8410
Precision: 10770 / 13014 = 0.8276
Recall: 10770 / 12500 = 0.8616
F1 (harmonic mean of precision and recall): 0.8442

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9861 / 10000 = 0.9861
Precision: 4886 / 4928 = 0.9915
Recall: 4886 / 4983 = 0.9805
F1 (harmonic mean of precision and recall): 0.9860
=====Dev Accuracy=====
Accuracy: 1668 / 2000 = 0.8340
Precision: 837 / 985 = 0.8497
Recall: 837 / 1021 = 0.8198
F1 (harmonic mean of precision and recall): 0.8345
Time for training and evaluation: 31.76 seconds
=====Test Accuracy=====
Accuracy: 21077 / 25000 = 0.8431
Precision: 10314 / 12051 = 0.8559
Recall: 10314 / 12500 = 0.8251
F1 (harmonic mean of precision and recall): 0.8402

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9151 / 10000 = 0.9151
Precision: 4975 / 5816 = 0.8554
Recall: 4975 / 4983 = 0.9984
F1 (harmonic mean of precision and recall): 0.9214
=====Dev Accuracy=====
Accuracy: 1569 / 2000 = 0.7845
Precision: 940 / 1290 = 0.7287
Recall: 940 / 1021 = 0.9207
F1 (harmonic mean of precision and recall): 0.8135
Time for training and evaluation: 30.06 seconds
=====Test Accuracy=====
Accuracy: 19754 / 25000 = 0.7902
Precision: 11633 / 16012 = 0.7265
Recall: 11633 / 12500 = 0.9306
F1 (harmonic mean of precision and recall): 0.8160

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9826 / 10000 = 0.9826
Precision: 4868 / 4927 = 0.9880
Recall: 4868 / 4983 = 0.9769
F1 (harmonic mean of precision and recall): 0.9824
=====Dev Accuracy=====
Accuracy: 1671 / 2000 = 0.8355
Precision: 859 / 1026 = 0.8372
Recall: 859 / 1021 = 0.8413
F1 (harmonic mean of precision and recall): 0.8393
Time for training and evaluation: 31.34 seconds
=====Test Accuracy=====
Accuracy: 20891 / 25000 = 0.8356
Precision: 10450 / 12509 = 0.8354
Recall: 10450 / 12500 = 0.8360
F1 (harmonic mean of precision and recall): 0.8357

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=20, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9843 / 10000 = 0.9843
Precision: 4958 / 5090 = 0.9741
Recall: 4958 / 4983 = 0.9950
F1 (harmonic mean of precision and recall): 0.9844
=====Dev Accuracy=====
Accuracy: 1683 / 2000 = 0.8415
Precision: 894 / 1084 = 0.8247
Recall: 894 / 1021 = 0.8756
F1 (harmonic mean of precision and recall): 0.8494
Time for training and evaluation: 45.67 seconds
=====Test Accuracy=====
Accuracy: 20986 / 25000 = 0.8394
Precision: 11027 / 13568 = 0.8127
Recall: 11027 / 12500 = 0.8822
F1 (harmonic mean of precision and recall): 0.8460

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.05, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9815 / 10000 = 0.9815
Precision: 4840 / 4882 = 0.9914
Recall: 4840 / 4983 = 0.9713
F1 (harmonic mean of precision and recall): 0.9812
=====Dev Accuracy=====
Accuracy: 1677 / 2000 = 0.8385
Precision: 831 / 964 = 0.8620
Recall: 831 / 1021 = 0.8139
F1 (harmonic mean of precision and recall): 0.8373
Time for training and evaluation: 47.22 seconds
=====Test Accuracy=====
Accuracy: 21003 / 25000 = 0.8401
Precision: 10209 / 11915 = 0.8568
Recall: 10209 / 12500 = 0.8167
F1 (harmonic mean of precision and recall): 0.8363

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.1, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9752 / 10000 = 0.9752
Precision: 4883 / 5031 = 0.9706
Recall: 4883 / 4983 = 0.9799
F1 (harmonic mean of precision and recall): 0.9752
=====Dev Accuracy=====
Accuracy: 1662 / 2000 = 0.8310
Precision: 848 / 1013 = 0.8371
Recall: 848 / 1021 = 0.8306
F1 (harmonic mean of precision and recall): 0.8338
Time for training and evaluation: 47.57 seconds
=====Test Accuracy=====
Accuracy: 20746 / 25000 = 0.8298
Precision: 10433 / 12620 = 0.8267
Recall: 10433 / 12500 = 0.8346
F1 (harmonic mean of precision and recall): 0.8307

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.2, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9554 / 10000 = 0.9554
Precision: 4947 / 5357 = 0.9235
Recall: 4947 / 4983 = 0.9928
F1 (harmonic mean of precision and recall): 0.9569
=====Dev Accuracy=====
Accuracy: 1647 / 2000 = 0.8235
Precision: 909 / 1150 = 0.7904
Recall: 909 / 1021 = 0.8903
F1 (harmonic mean of precision and recall): 0.8374
Time for training and evaluation: 47.46 seconds
=====Test Accuracy=====
Accuracy: 20518 / 25000 = 0.8207
Precision: 11268 / 14518 = 0.7761
Recall: 11268 / 12500 = 0.9014
F1 (harmonic mean of precision and recall): 0.8341

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.3, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9921 / 10000 = 0.9921
Precision: 4924 / 4944 = 0.9960
Recall: 4924 / 4983 = 0.9882
F1 (harmonic mean of precision and recall): 0.9920
=====Dev Accuracy=====
Accuracy: 1680 / 2000 = 0.8400
Precision: 841 / 981 = 0.8573
Recall: 841 / 1021 = 0.8237
F1 (harmonic mean of precision and recall): 0.8402
Time for training and evaluation: 48.02 seconds
=====Test Accuracy=====
Accuracy: 21091 / 25000 = 0.8436
Precision: 10359 / 12127 = 0.8542
Recall: 10359 / 12500 = 0.8287
F1 (harmonic mean of precision and recall): 0.8413

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.4, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9828 / 10000 = 0.9828
Precision: 4907 / 5003 = 0.9808
Recall: 4907 / 4983 = 0.9847
F1 (harmonic mean of precision and recall): 0.9828
=====Dev Accuracy=====
Accuracy: 1678 / 2000 = 0.8390
Precision: 863 / 1027 = 0.8403
Recall: 863 / 1021 = 0.8452
F1 (harmonic mean of precision and recall): 0.8428
Time for training and evaluation: 48.26 seconds
=====Test Accuracy=====
Accuracy: 20917 / 25000 = 0.8367
Precision: 10529 / 12641 = 0.8329
Recall: 10529 / 12500 = 0.8423
F1 (harmonic mean of precision and recall): 0.8376

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.5, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9751 / 10000 = 0.9751
Precision: 4932 / 5130 = 0.9614
Recall: 4932 / 4983 = 0.9898
F1 (harmonic mean of precision and recall): 0.9754
=====Dev Accuracy=====
Accuracy: 1656 / 2000 = 0.8280
Precision: 885 / 1093 = 0.8097
Recall: 885 / 1021 = 0.8668
F1 (harmonic mean of precision and recall): 0.8373
Time for training and evaluation: 47.55 seconds
=====Test Accuracy=====
Accuracy: 20845 / 25000 = 0.8338
Precision: 10976 / 13607 = 0.8066
Recall: 10976 / 12500 = 0.8781
F1 (harmonic mean of precision and recall): 0.8408

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.6, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9862 / 10000 = 0.9862
Precision: 4918 / 4991 = 0.9854
Recall: 4918 / 4983 = 0.9870
F1 (harmonic mean of precision and recall): 0.9862
=====Dev Accuracy=====
Accuracy: 1696 / 2000 = 0.8480
Precision: 873 / 1029 = 0.8484
Recall: 873 / 1021 = 0.8550
F1 (harmonic mean of precision and recall): 0.8517
Time for training and evaluation: 48.24 seconds
=====Test Accuracy=====
Accuracy: 21060 / 25000 = 0.8424
Precision: 10620 / 12680 = 0.8375
Recall: 10620 / 12500 = 0.8496
F1 (harmonic mean of precision and recall): 0.8435

---------------------------------------


Namespace(model='LR', tokenizer='NGRAM', feats='COUNTER', learning_rate=0.7, write_predictions=False, batch_size=25, epochs=7, ngrams=2, train_path='data/imdb_train.txt', dev_path='data/imdb_dev.txt', test_path='data/imdb_test.txt')
10000 / 2000 / 25000 train/dev/test examples
=====Train Accuracy=====
Accuracy: 9849 / 10000 = 0.9849
Precision: 4937 / 5042 = 0.9792
Recall: 4937 / 4983 = 0.9908
F1 (harmonic mean of precision and recall): 0.9849
=====Dev Accuracy=====
Accuracy: 1677 / 2000 = 0.8385
Precision: 864 / 1030 = 0.8388
Recall: 864 / 1021 = 0.8462
F1 (harmonic mean of precision and recall): 0.8425
Time for training and evaluation: 47.58 seconds
=====Test Accuracy=====
Accuracy: 21009 / 25000 = 0.8404
Precision: 10676 / 12843 = 0.8313
Recall: 10676 / 12500 = 0.8541
F1 (harmonic mean of precision and recall): 0.8425

---------------------------------------


